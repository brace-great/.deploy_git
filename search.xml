<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>常用工具命令(2024/10/9更新)</title>
      <link href="/2024/10/09/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E5%91%BD%E4%BB%A4/"/>
      <url>/2024/10/09/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="annie"><a href="#annie" class="headerlink" title="annie"></a>annie</h2><p>annie 是一款跨平台的视频下载器，支持下载多个主流网站的视频，无论源站视频是什么格式，下载后用 ffmpeg 合并为 mp4 格式。我使用的是本地安装包，所以不用安装 Scoop 了，也不必配置环境变量，写好命令直接用。以 cmd 加空格开头，后面放程序命令，这样在启动命令后就不会自动执行，而是显示在 cmd 里面，方便复制粘贴用。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cmd</span> annie -o D:\Edge</span><br></pre></td></tr></table></figure><h2 id="BBdown"><a href="#BBdown" class="headerlink" title="BBdown"></a>BBdown</h2><p>BBdown 是一款专门批量下载 B 站视频的工具，一次性下载所有分 P 视频，虽然 annie 很强大但如果要批量下载就有没办法了。依然是以 cmd 加空格开头不自动执行命令，下载后依然用 ffmpeg 合并为 mp4 格式。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cmd</span> BBDown.exe</span><br></pre></td></tr></table></figure><h2 id="rclone"><a href="#rclone" class="headerlink" title="rclone"></a>rclone</h2><p>rclone 是一个用于和同步云平台同步文件和目录命令行工具，可以在本地挂载各个网盘。我试了挂载 OneDrive 之后感觉很鸡肋，大文件传输简直要命，又没有传输进度<br>rclone 挂载 OneDrive<br>挂载好 OneDrive 后，下次以这样的命令启动：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rclone mount OneDrive:/  O: --cache-<span class="built_in">dir</span> D:\OneDrive --vfs-cache-<span class="built_in">mode</span> writes</span><br></pre></td></tr></table></figure><p>rclone 获取微软应用 refresh token<br>其实还是研究自动续期 office365 保留下来的东西，我经常经常获取微软应用的 token 搞各种东西，一条命令自动获取 token：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\rclone.exe authorize &quot;onedrive&quot; &quot;你的机密&quot; &quot;你的秘钥&quot;&amp;<span class="built_in">pause</span></span><br></pre></td></tr></table></figure><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><p>以下是一些好玩的 bat 命令：</p><h3 id="删除系统休眠文件"><a href="#删除系统休眠文件" class="headerlink" title="删除系统休眠文件"></a>删除系统休眠文件</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powercfg -h off</span><br></pre></td></tr></table></figure><h3 id="查看系统激活状态"><a href="#查看系统激活状态" class="headerlink" title="查看系统激活状态"></a>查看系统激活状态</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">slmgr.vbs -xpr</span><br></pre></td></tr></table></figure><h3 id="导出设备电池状态报告"><a href="#导出设备电池状态报告" class="headerlink" title="导出设备电池状态报告"></a>导出设备电池状态报告</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powercfg /batteryreport /output &quot;C:\battery_report.html</span><br></pre></td></tr></table></figure><h3 id="制作图种"><a href="#制作图种" class="headerlink" title="制作图种"></a>制作图种</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">copy</span>/b <span class="number">1</span>.jpg+<span class="number">2</span>.exe <span class="number">3</span>.jpg</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Nodejs </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>编译时报错 Cannot find module &#39;undici-types&#39; 的原因和解决</title>
      <link href="/2024/10/09/%E7%9A%84%E5%8E%9F%E5%9B%A0%E5%92%8C%E8%A7%A3%E5%86%B3/"/>
      <url>/2024/10/09/%E7%9A%84%E5%8E%9F%E5%9B%A0%E5%92%8C%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<p>由于 package.json 和 package-lock.json 里的版本号已有指定，因此 node_modules 下安装好的依赖可能并不完全一样，所以在演示仓库的项目里，这个错误没有被触发。</p><p>因此我把 node_modules 和 package-lock.json 文件删除，再重新安装依赖，确实，现在演示项目也无法通过编译了，还好日志很清晰，报错是来自 node_modules&#x2F;@types&#x2F;node&#x2F;globals.d.ts 这个文件：</p><p>➜ hello-node git:(main) ✗ npm run build</p><blockquote><p>@learning-vue3&#x2F;<a href="mailto:&#110;&#111;&#x64;&#x65;&#x40;&#49;&#x2e;&#48;&#x2e;&#48;">&#110;&#111;&#x64;&#x65;&#x40;&#49;&#x2e;&#48;&#x2e;&#48;</a> build<br>tsc src&#x2F;ts&#x2F;index.ts –outDir dist –target es6</p></blockquote><p>node_modules&#x2F;@types&#x2F;node&#x2F;globals.d.ts:6:76 - error TS2792: Cannot find module ‘undici-types’. Did you mean to set the ‘moduleResolution’ option to ‘node’, or to add aliases to the ‘paths’ option?</p><p>6 type _Request &#x3D; typeof globalThis extends { onmessage: any } ? {} : import(“undici-types”).Request;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">node_modules/@types/node/globals.d.ts:7:77 - error TS2792: Cannot find module &#x27;undici-types&#x27;. Did you mean to set the &#x27;moduleResolution&#x27; option to &#x27;node&#x27;, or to add aliases to the &#x27;paths&#x27; option?</span><br><span class="line"></span><br><span class="line">7 type \_Response = typeof globalThis extends &#123; onmessage: any &#125; ? &#123;&#125; : import(&quot;undici-types&quot;).Response;</span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F; …<br>分析错误日志<br>由于这个项目是很入门的演示项目，主要为了演示 Common JS 模块和 ES Module 模块的开发，以及一些 TypeScript 语法的入门，并没有涉及到 Node.js API 的操作，因此也没有主动去安装 @types&#x2F;node 这个包。</p><p>这里顺便补充个说明： @types&#x2F;node 包主要是为 TypeScript 提供 Node.js API 的类型定义，如果在项目里调用了 Node.js 的 API ，则需要显式安装它，使 TypeScript 可以识别到这些 API 。</p><p>所以 @types&#x2F;node 这个包只能是第三方依赖带进来一并被安装的，为了方便排查，重新克隆了一个演示项目的原版，并通过 npm list @types&#x2F;node 查看可以正常 build 时的依赖版本号，以及是哪个包引入的这个依赖。</p><p>➜ hello-node-original git:(main) ✗ npm list @types&#x2F;node</p><p>@learning-vue3&#x2F;<a href="mailto:&#110;&#x6f;&#x64;&#x65;&#64;&#x31;&#46;&#x30;&#x2e;&#48;">&#110;&#x6f;&#x64;&#x65;&#64;&#x31;&#46;&#x30;&#x2e;&#48;</a> &#x2F;Users&#x2F;chengpeiquan&#x2F;Documents&#x2F;projects&#x2F;demo&#x2F;h2<br>└─┬ <a href="mailto:&#x74;&#x73;&#x2d;&#x6e;&#111;&#x64;&#101;&#x40;&#49;&#48;&#46;&#57;&#x2e;&#x31;">&#x74;&#x73;&#x2d;&#x6e;&#111;&#x64;&#101;&#x40;&#49;&#48;&#46;&#57;&#x2e;&#x31;</a><br>└── @types&#x2F;<a href="mailto:&#110;&#111;&#100;&#101;&#64;&#49;&#x38;&#46;&#x31;&#x31;&#46;&#48;">&#110;&#111;&#100;&#101;&#64;&#49;&#x38;&#46;&#x31;&#x31;&#46;&#48;</a><br>此时正常 build 的 @types&#x2F;node 版本号是 18.11.0 ，是从 ts-node 引入的。</p><p>同样的命令在有问题的项目下运行，得到不同的版本号 20.12.5 。</p><p>➜ hello-node git:(main) ✗ npm list @types&#x2F;node</p><p>@learning-vue3&#x2F;<a href="mailto:&#x6e;&#111;&#x64;&#x65;&#64;&#x31;&#46;&#x30;&#46;&#48;">&#x6e;&#111;&#x64;&#x65;&#64;&#x31;&#46;&#x30;&#46;&#48;</a> &#x2F;Users&#x2F;chengpeiquan&#x2F;Documents&#x2F;projects&#x2F;demo&#x2F;hello-node<br>└─┬ <a href="mailto:&#116;&#115;&#x2d;&#x6e;&#111;&#x64;&#x65;&#64;&#x31;&#x30;&#x2e;&#x39;&#46;&#50;">&#116;&#115;&#x2d;&#x6e;&#111;&#x64;&#x65;&#64;&#x31;&#x30;&#x2e;&#x39;&#46;&#50;</a><br>└── @types&#x2F;<a href="mailto:&#110;&#x6f;&#x64;&#x65;&#x40;&#x32;&#x30;&#46;&#x31;&#50;&#46;&#x35;">&#110;&#x6f;&#x64;&#x65;&#x40;&#x32;&#x30;&#46;&#x31;&#50;&#46;&#x35;</a><br>查看项目 node_modules&#x2F;ts-node 目录下的 package.json 文件，看到 ts-node 对 @types&#x2F;node 的依赖版本号是设置为 * 号，也就是通配符（下面是关键信息的列举，非全部）。</p><p>{<br>“name”: “ts-node”,<br>“version”: “10.9.2”,<br>“peerDependencies”: {<br>“@types&#x2F;node”: “*“<br>}<br>}<br>通配符版本号是指允许任何版本的依赖项，会安装最新可用版本，这也是为什么删除了 node_modules 目录和 package-lock.json 文件后，重新安装依赖后版本变化这么大的原因。</p><p>关于这个 undici-types 依赖，查看了 @types&#x2F;node 的 package.json 文件，确实在后面的版本里引入其作为 dependencies 依赖，而之前的版本并没有，在 GitHub 溜达了一圈，原因可能来自 Node.js Undici 的这个 issue ）。</p><p>解决问题<br>原因查明，解决方案就好办了，这里提供两个有效的解决方案。</p><p>使用 skipLibCheck 选项<br>由于 demo 的报错主要来自第三方库的代码检查（ TypeScript 默认会检查所有代码），在实际的项目开发中为了节省编译时间和跳过源码之外的问题报错，通常会启用 skipLibCheck 选项通知 TypeScript 跳过这些依赖库的类型检查（扩展名为 .d.ts 的文件），从而只检查开发者编写的源代码。</p><p>这也是为什么写了那么久的 TypeScript 从来没有遇到这种问题的原因，因为在实际项目里一直都是跳过对第三方库的检查啊哈哈哈。</p><p>选择这个方案的话，如果是走 CLI 选项编译，可以在命令里添加一个 –skipLibCheck 选项：</p><p>&#x2F;&#x2F; package.json<br>{<br>“scripts”: {<br>“build”: “tsc src&#x2F;ts&#x2F;index.ts –outDir dist –target es6 –skipLibCheck”<br>}<br>}<br>如果是通过 tsconfig.json 配置编译选项，则是添加在 compilerOptions 里：</p><p>&#x2F;&#x2F; tsconfig.json<br>{<br>“compilerOptions”: {<br>“target”: “es6”,<br>“module”: “es6”,<br>“outDir”: “.&#x2F;dist”,<br>“skipLibCheck”: true<br>}<br>}<br>关于 skipLibCheck 选项 的更多说明可以在 TypeScript 官网文档上查阅。</p><p>添加 moduleResolution<br>除了 skipLibCheck ，还有一个解决方案，还记得错误日志吗？在错误日志里给出了两个解决方案的建议：</p><p>Did you mean to set the ‘moduleResolution’ option to ‘node’, or to add aliases to the ‘paths’ option?<br>由于这是一个第三方库的报错，因此 paths 方案不适用（该方案适合对源码目录下的文件配置 Alias 别名）。</p><p>因此可以通过另外一个建议，添加 –moduleResolution 选项。</p><p>&#x2F;&#x2F; package.json<br>{<br>“scripts”: {<br>“build”: “tsc src&#x2F;ts&#x2F;index.ts –outDir dist –target es6 –moduleResolution node”<br>}<br>}<br>也可以成功解决编译问题，同理，也可以在 tsconfig.json 里配置该选项：</p><p>&#x2F;&#x2F; tsconfig.json<br>{<br>“compilerOptions”: {<br>“target”: “es6”,<br>“module”: “es6”,<br>“outDir”: “.&#x2F;dist”,<br>“moduleResolution”: “Node”<br>}<br>}<br>关于 moduleResolution 选项 的更多说明可以在 TypeScript 官网文档上查阅。</p>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>使用github Actions引入npm包</title>
      <link href="/2023/05/29/Actions%E5%BC%95%E5%85%A5npm%E5%8C%85/"/>
      <url>/2023/05/29/Actions%E5%BC%95%E5%85%A5npm%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<p>由于我有一个不想上传到 npm 的包，但又需要引用它，所以我考虑直接在 GitHub 上发布该包，并进行引用。下面我将逐步解释如何使用 GitHub Actions，以我的项目为例：</p><p>由于使用 TypeScript，所以需要进行编译。在 tsconfig.json 文件中，需要正确配置输出文件夹:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">name: Release</span><br><span class="line"></span><br><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">    branches: [&#x27;main&#x27;]</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line">  build:</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line"></span><br><span class="line">    strategy:</span><br><span class="line">      matrix:</span><br><span class="line">        node-version: [18.x]</span><br></pre></td></tr></table></figure><p>监视 main 分支提交</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">steps:</span><br><span class="line">  - uses: actions/checkout@v3</span><br><span class="line">  - name: Use Node.js $&#123;&#123; matrix.node-version &#125;&#125;</span><br><span class="line">    uses: actions/setup-node@v3</span><br><span class="line">    with:</span><br><span class="line">      node-version: $&#123;&#123; matrix.node-version &#125;&#125;</span><br></pre></td></tr></table></figure><p>配置 node 环境</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">- name: Install pnpm</span><br><span class="line">  uses: pnpm/action-setup@v2</span><br><span class="line">  id: pnpm-install</span><br><span class="line">  with:</span><br><span class="line">    version: 7</span><br><span class="line">    run_install: false</span><br><span class="line">- name: Get pnpm store directory</span><br><span class="line">  id: pnpm-cache</span><br><span class="line">  shell: bash</span><br><span class="line">  run: |</span><br><span class="line">    echo &quot;STORE_PATH=$(pnpm store path)&quot; &gt;&gt; $GITHUB_OUTPUT</span><br><span class="line">- name: Setup pnpm cache</span><br><span class="line">  uses: actions/cache@v3</span><br><span class="line">  with:</span><br><span class="line">    path: $&#123;&#123; steps.pnpm-cache.outputs.STORE_PATH &#125;&#125;</span><br><span class="line">    key: $&#123;&#123; runner.os &#125;&#125;-pnpm-store-$&#123;&#123; hashFiles(&#x27;**/pnpm-lock.yaml&#x27;) &#125;&#125;</span><br><span class="line">    restore-keys: |</span><br><span class="line">      $&#123;&#123; runner.os &#125;&#125;-pnpm-store-</span><br><span class="line">- name: Install dependencies</span><br><span class="line">  run: pnpm install</span><br></pre></td></tr></table></figure><p>由于我使用的是 pnpm，GitHub actions 并不原生支持 pnpm，因此需要安装一下。这是来自 pnpm 自己提供的设置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- name: build</span><br><span class="line">  run: pnpm run build</span><br><span class="line">- name: read version</span><br><span class="line">  id: version</span><br><span class="line">  uses: ashley-taylor/read-json-property-action@v1.0</span><br><span class="line">  with:</span><br><span class="line">    path: ./package.json</span><br><span class="line">    property: version</span><br><span class="line">- name: pack</span><br><span class="line">  run: |</span><br><span class="line">    tar -zcvf prism-core.tar.gz ./dist ./template package.json README.md</span><br></pre></td></tr></table></figure><p>第一步：构建；<br>第二步：提取 package.json 中的版本号，稍后会用到；<br>第三步：打包。请注意，npm install 不支持 zip 包，因此需要打包成 tarball 文件。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">- name: Create Release</span><br><span class="line">  id: create_release</span><br><span class="line">  uses: actions/create-release@latest</span><br><span class="line">  env:</span><br><span class="line">    GITHUB_TOKEN: $&#123;&#123; secrets.GITHUB_TOKEN &#125;&#125;</span><br><span class="line">  with:</span><br><span class="line">    tag_name: v$&#123;&#123;steps.version.outputs.value&#125;&#125;</span><br><span class="line">    release_name: v$&#123;&#123;steps.version.outputs.value&#125;&#125;</span><br><span class="line">    draft: false</span><br><span class="line">    prerelease: false</span><br><span class="line">- name: Upload Release Asset</span><br><span class="line">  id: upload-release-asset</span><br><span class="line">  uses: actions/upload-release-asset@v1</span><br><span class="line">  env:</span><br><span class="line">    GITHUB_TOKEN: $&#123;&#123; secrets.GITHUB_TOKEN &#125;&#125;</span><br><span class="line">  with:</span><br><span class="line">    upload_url: $&#123;&#123; steps.create_release.outputs.upload_url &#125;&#125;</span><br><span class="line">    asset_path: ./prism-core.tar.gz</span><br><span class="line">    asset_name: prism-core.tar.gz</span><br><span class="line">    asset_content_type: application/x-tar</span><br></pre></td></tr></table></figure><p>第一步：根据前面的版本号生成发布版本。<br>第二步：上传发布版本。请注意，在 actions&#x2F;general 的 Workflow permissions 中开启项目 actions 的读写权限。</p><p>这样，每次提交后都会生成发布版本（记得修改版本号）。</p><p>接下来是引入部分。只需使用 npm install 自动发布生成的 tarball 网址即可，例如：npm install <a href="https://github.com/nulla2011/prism-core/releases/download/v0.2.4/prism-core.tar.gz">https://github.com/nulla2011/prism-core/releases/download/v0.2.4/prism-core.tar.gz</a>。每次提交后，只需修改网址中的版本号，然后运行 npm i 即可。或者，你也可以使用 npm install <a href="https://github.com/nulla2011/prism-core/releases/latest/download/prism-core.tar.gz">https://github.com/nulla2011/prism-core/releases/latest/download/prism-core.tar.gz</a>，但这种方式没有指定版本号，可能会出现问题，所以需要注意一下。</p><p>最后附上完整的 Github Actions 配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">name: Release</span><br><span class="line"></span><br><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">    branches: [&#x27;main&#x27;]</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line">  build:</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line"></span><br><span class="line">    strategy:</span><br><span class="line">      matrix:</span><br><span class="line">        node-version: [18.x]</span><br><span class="line"></span><br><span class="line">    steps:</span><br><span class="line">      - uses: actions/checkout@v3</span><br><span class="line">      - name: Use Node.js $&#123;&#123; matrix.node-version &#125;&#125;</span><br><span class="line">        uses: actions/setup-node@v3</span><br><span class="line">        with:</span><br><span class="line">          node-version: $&#123;&#123; matrix.node-version &#125;&#125;</span><br><span class="line">      - name: Install pnpm</span><br><span class="line">        uses: pnpm/action-setup@v2</span><br><span class="line">        id: pnpm-install</span><br><span class="line">        with:</span><br><span class="line">          version: 7</span><br><span class="line">          run_install: false</span><br><span class="line">      - name: Get pnpm store directory</span><br><span class="line">        id: pnpm-cache</span><br><span class="line">        shell: bash</span><br><span class="line">        run: |</span><br><span class="line">          echo &quot;STORE_PATH=$(pnpm store path)&quot; &gt;&gt; $GITHUB_OUTPUT</span><br><span class="line">      - name: Setup pnpm cache</span><br><span class="line">        uses: actions/cache@v3</span><br><span class="line">        with:</span><br><span class="line">          path: $&#123;&#123; steps.pnpm-cache.outputs.STORE_PATH &#125;&#125;</span><br><span class="line">          key: $&#123;&#123; runner.os &#125;&#125;-pnpm-store-$&#123;&#123; hashFiles(&#x27;**/pnpm-lock.yaml&#x27;) &#125;&#125;</span><br><span class="line">          restore-keys: |</span><br><span class="line">            $&#123;&#123; runner.os &#125;&#125;-pnpm-store-</span><br><span class="line">      - name: Install dependencies</span><br><span class="line">        run: pnpm install</span><br><span class="line">      - name: build</span><br><span class="line">        run: pnpm run build</span><br><span class="line">      - name: read version</span><br><span class="line">        id: version</span><br><span class="line">        uses: ashley-taylor/read-json-property-action@v1.0</span><br><span class="line">        with:</span><br><span class="line">          path: ./package.json</span><br><span class="line">          property: version</span><br><span class="line">      - name: pack</span><br><span class="line">        run: |</span><br><span class="line">          tar -zcvf prism-core.tar.gz ./dist ./template package.json README.md</span><br><span class="line">      - name: Create Release</span><br><span class="line">        id: create_release</span><br><span class="line">        uses: actions/create-release@latest</span><br><span class="line">        env:</span><br><span class="line">          GITHUB_TOKEN: $&#123;&#123; secrets.GITHUB_TOKEN &#125;&#125;</span><br><span class="line">        with:</span><br><span class="line">          tag_name: v$&#123;&#123;steps.version.outputs.value&#125;&#125;</span><br><span class="line">          release_name: v$&#123;&#123;steps.version.outputs.value&#125;&#125;</span><br><span class="line">          draft: false</span><br><span class="line">          prerelease: false</span><br><span class="line">      - name: Upload Release Asset</span><br><span class="line">        id: upload-release-asset</span><br><span class="line">        uses: actions/upload-release-asset@v1</span><br><span class="line">        env:</span><br><span class="line">          GITHUB_TOKEN: $&#123;&#123; secrets.GITHUB_TOKEN &#125;&#125;</span><br><span class="line">        with:</span><br><span class="line">          upload_url: $&#123;&#123; steps.create_release.outputs.upload_url &#125;&#125;</span><br><span class="line">          asset_path: ./prism-core.tar.gz</span><br><span class="line">          asset_name: prism-core.tar.gz</span><br><span class="line">          asset_content_type: application/x-tar</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Nodejs </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ChatGPT注册</title>
      <link href="/2022/12/07/ChatGPT%E6%B3%A8%E5%86%8C/"/>
      <url>/2022/12/07/ChatGPT%E6%B3%A8%E5%86%8C/</url>
      
        <content type="html"><![CDATA[<ol><li><p>访问官网点击 Sign up：<a href="https://chat.openai.com/auth/login">https://chat.openai.com/auth/login</a></p></li><li><p>邮箱注册或使用谷歌账户&#x2F;微软账户注册</p></li><li><p>到了最重要的一步，要国外的号码才能注册:</p></li></ol><p>我用的是印度尼西亚的号码，购买地址是 <a href="http://www.feijiji.com/">www.feijiji.com</a></p><p>付款后可以获取到 ID, 然后我们拿这串 ID 拼接到：<a href="https://ai.7z.ee/sms/">https://ai.7z.ee/sms/</a> 后面并在浏览器中打开</p><p>此时根据返回的信息输入国家号和手机</p><p>点击发送之后，刷新刚刚的返回的地址即可等待验证码</p><ul><li>如果等待很久还是不来码可以把 URL 中间的 sms 改成 chg 然后刷新获取新的号码, 然后再把 chg 换成 sms 接收新的验证码即可。</li></ul>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>uview入门</title>
      <link href="/2022/09/12/uview%E5%85%A5%E9%97%A8/"/>
      <url>/2022/09/12/uview%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><ul><li>npm i sass</li><li>npm i sass-loader@10</li><li>npm i uview@1</li></ul><h3 id="全局引入uview的js库"><a href="#全局引入uview的js库" class="headerlink" title="全局引入uview的js库"></a>全局引入uview的js库</h3><ul><li>在main.js中引入uview-ui</li></ul><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/eaeffec2f103451e9884ae6f4c706693~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt="image.png"></p><h3 id="全局引入uview的sass库"><a href="#全局引入uview的sass库" class="headerlink" title="全局引入uview的sass库"></a>全局引入uview的sass库</h3><ul><li>在根目录下的uni.scss文件中引入主题文件</li></ul><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3f1974a34d03414c8769b870e1428b0d~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt="image.png"></p><h3 id="全局引入uview主样式库"><a href="#全局引入uview主样式库" class="headerlink" title="全局引入uview主样式库"></a>全局引入uview主样式库</h3><ul><li>在根目录下的App.vue文件中引入基础样式库</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d9aa7d6ea30b410b98cee0ad605d7abc~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt="image.png"></p><h3 id="配置easycom模式引入uview组件"><a href="#配置easycom模式引入uview组件" class="headerlink" title="配置easycom模式引入uview组件"></a>配置easycom模式引入uview组件</h3><ul><li>在根目录下的pages.json文件中配置easycom组件</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/29cf608c43fe4210a230350b83a13aff~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" alt="image.png"></p><p>ok</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> uniapp ui </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React生命周期</title>
      <link href="/2022/05/04/React%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
      <url>/2022/05/04/React%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="react-的生命周期大全"><a href="#react-的生命周期大全" class="headerlink" title="react 的生命周期大全"></a>react 的生命周期大全</h1><p>react 的生命周期除了能够在一些指定的时间触发一些函数以外 还具备一些其他能力。</p><h1 id="挂载阶段"><a href="#挂载阶段" class="headerlink" title="挂载阶段"></a>挂载阶段</h1><h2 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h2><p>类组件本就是一个类的写法，那么 constructor 就是一个类的实例化过程当中最先执行的函数这就是一个生命周期</p><h2 id="static-getDerivedStateFromProps"><a href="#static-getDerivedStateFromProps" class="headerlink" title="static getDerivedStateFromProps"></a>static getDerivedStateFromProps</h2><p>挂载的时候会执行一次</p><h2 id="render"><a href="#render" class="headerlink" title="render"></a>render</h2><p>类组就是通过 render 函数返回内容来渲染，所以 render 在 return 之前在第一次挂载的时候就类似于 vue 的 beforeMount</p><h2 id="componentDidMount"><a href="#componentDidMount" class="headerlink" title="componentDidMount"></a>componentDidMount</h2><p>组件完成挂载的时候执行</p><p>这个是发送请求或者是开始设置定时器或者监听的最好时机</p><h1 id="更新阶段（commit-阶段-提交阶段）"><a href="#更新阶段（commit-阶段-提交阶段）" class="headerlink" title="更新阶段（commit 阶段 提交阶段）"></a>更新阶段（commit 阶段 提交阶段）</h1><h2 id="static-getDerivedStateFromProps-props-state"><a href="#static-getDerivedStateFromProps-props-state" class="headerlink" title="static getDerivedStateFromProps(props,state)"></a>static getDerivedStateFromProps(props,state)</h2><p>接受的属性变化 或者是 setState 之后 或者是 forceUpdat 的时候都会执行一次</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;https://lf3-cdn-tos.bytecdntp.com/cdn/expire-1-M/react/16.14.0/umd/react.development.js&quot; type=&quot;application/javascript&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;https://lf26-cdn-tos.bytecdntp.com/cdn/expire-1-M/react-dom/16.14.0/umd/react-dom.development.js&quot; type=&quot;application/javascript&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;https://lf3-cdn-tos.bytecdntp.com/cdn/expire-1-M/babel-standalone/7.0.0-alpha.20/babel.min.js&quot; type=&quot;application/javascript&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line">        class CiaoPiao extends React.Component &#123;</span><br><span class="line">            state = &#123;</span><br><span class="line">                res: &#x27;下次加油!!!&#x27;,</span><br><span class="line">                luckyNumber: 7</span><br><span class="line">            &#125;</span><br><span class="line">            static getDerivedStateFromProps(props,state)&#123;</span><br><span class="line">                if(props.nums.includes(state.luckyNumber)) return &#123; res:&#x27;suprise!!! 中奖拉&#x27; &#125;</span><br><span class="line">                return &#123;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">            render()&#123;</span><br><span class="line">                return &lt;div&gt; 中奖的结果: &#123; this.state.res &#125; &lt;/div&gt;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        class Cp2  extends React.Component &#123;</span><br><span class="line">            state = &#123;</span><br><span class="line">                tips:&#x27;这点量还行&#x27;,</span><br><span class="line">                luckynumber: 7,</span><br><span class="line">                crtxt: &#x27;下次加油 谢谢惠顾&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">            // 这个生命周期是 静态方法 getDerivedStateFromProps发生在  shouldComponentUpdate</span><br><span class="line">            // 也是有新的属性或者是状态或者是强制更新会执行</span><br><span class="line">            static getDerivedStateFromProps(props,state)&#123;</span><br><span class="line">                console.log(&#x27; cp2 getDrivedStateFromProps 执行&#x27; )</span><br><span class="line">                // 它可以临时的去修改 state ，在最终执行渲染之前可以再次的修改state的值</span><br><span class="line">                // 这里返回的值就会覆盖 现在的state</span><br><span class="line">                // 比如下面的代码 就是判断接受到的a属性  如果超过了5那么久返回一个对象这个对象 会跟当前的state合并</span><br><span class="line">                // props.a 如果大于了5. 那么  返回的值当中有一个tips属性  这个tips属性就会覆盖上面的22行当中的原来的state当中的tips</span><br><span class="line">                if(props.a &gt; 5) return &#123; tips:&#x27;不行太多了 超过5个了&#x27; &#125;</span><br><span class="line">                return &#123;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">            shouldComponentUpdate()&#123;</span><br><span class="line">                console.log(&#x27; cp2  shouldComponentUpdate 执行&#x27;)</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">            render()&#123;</span><br><span class="line">                console.log(&#x27; cp2 render 执行&#x27; )</span><br><span class="line">                return (</span><br><span class="line">                    &lt;div&gt; 我是Cp2组件 &#123; this.props.a &#125;   &#123; this.state.tips &#125;  &lt;/div&gt;</span><br><span class="line">                )</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        class Cp1 extends React.Component &#123;</span><br><span class="line">            constructor()&#123;</span><br><span class="line">                super();</span><br><span class="line">                this.state = &#123;</span><br><span class="line">                    ct:1</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            render()&#123;</span><br><span class="line">                return (</span><br><span class="line">                    &lt;div&gt;</span><br><span class="line">                         &lt;Cp2 a=&#123; this.state.ct &#125;  number=&#123; [] &#125;&gt;&lt;/Cp2&gt;</span><br><span class="line">                         &lt;button onClick=&#123; ()=&gt; this.setState(&#123; ct: this.state.ct + 1 &#125;)  &#125;&gt;</span><br><span class="line">                             修改ct状态的值 递增1</span><br><span class="line">                         &lt;/button&gt;</span><br><span class="line">                         &lt;hr / &gt;</span><br><span class="line">                         &lt;div&gt; 彩票的例子 &lt;/div&gt;</span><br><span class="line">                         &lt;CiaoPiao  nums=&#123; [ 4,5,6,1,3,7]&#125;&gt;&lt;/CiaoPiao&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                )</span><br><span class="line">             &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ReactDOM.render( &lt;Cp1&gt;&lt;/Cp1&gt;, document.getElementById(&quot;app&quot;) )</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .kfc&#123;</span><br><span class="line">            color:red</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="shouldComponentUpdate-props-state"><a href="#shouldComponentUpdate-props-state" class="headerlink" title="shouldComponentUpdate( props , state)"></a>shouldComponentUpdate( props , state)</h2><p>state 这个参数是我们 setState 之后 最新的 state 的值</p><p>发生在更新之前 并且可以控制是否允许组件更新(只能控制是否更新不能控制状态是否变化)</p><p>通过返回的布尔值状态来控制是否渲染</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;https://lf3-cdn-tos.bytecdntp.com/cdn/expire-1-M/react/16.14.0/umd/react.development.js&quot; type=&quot;application/javascript&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;https://lf26-cdn-tos.bytecdntp.com/cdn/expire-1-M/react-dom/16.14.0/umd/react-dom.development.js&quot; type=&quot;application/javascript&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;https://lf3-cdn-tos.bytecdntp.com/cdn/expire-1-M/babel-standalone/7.0.0-alpha.20/babel.min.js&quot; type=&quot;application/javascript&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line">        class Cp2  extends React.Component &#123;</span><br><span class="line">            //  component 组件 Will 即将  Unmount 卸载 =&gt; 组件即将卸载（vue2 当中的 beforeDestroy / vue3当中的 beforeUnmount)</span><br><span class="line">            componentWillUnmount()&#123;</span><br><span class="line">                console.log(&#x27;cp2组件的 componentWillUnmount 执行&#x27;)</span><br><span class="line">            &#125;</span><br><span class="line">            render()&#123;</span><br><span class="line">                return (</span><br><span class="line">                    &lt;div&gt; 我是Cp2组件  &lt;/div&gt;</span><br><span class="line">                )</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        class Cp1 extends React.Component &#123;</span><br><span class="line">            constructor()&#123;</span><br><span class="line">                super();</span><br><span class="line">                console.log(&#x27;constructor 执行&#x27;)</span><br><span class="line">                // beforeCreate 对应vue的生命周期</span><br><span class="line">                this.state  = &#123;</span><br><span class="line">                    ct: 1,</span><br><span class="line">                    showCp2: true</span><br><span class="line">                &#125;</span><br><span class="line">                // created 对应vue的生命周期</span><br><span class="line">            &#125;</span><br><span class="line">            // component 组件 did 完成  mount 挂载 =&gt; 挂载完成之后  ( vue 当中的mounted)</span><br><span class="line">            componentDidMount()&#123;</span><br><span class="line">                //console.log(&#x27;componentDidMount 执行&#x27;)</span><br><span class="line">            &#125;</span><br><span class="line">            // component 组件 did 完成  Update 更新 =&gt; 组件更新完成之后  （vue 当中的 updated)</span><br><span class="line">            componentDidUpdate()&#123;</span><br><span class="line">               console.log(&#x27;componentDidUpdate 执行&#x27;)</span><br><span class="line">            &#125;</span><br><span class="line">            // component 组件 will 即将  Update 更新 =&gt; 组件更新之前执行 ( vue 当中的beforeUpdate )</span><br><span class="line">            //  发生在 SCU 之后  在render之前</span><br><span class="line">            componentWillUpdate()&#123;</span><br><span class="line">                console.log(&#x27;componentWillUpdate  即将更新 执行&#x27;)</span><br><span class="line">            &#125;</span><br><span class="line">            // should是否允许 Component 组件 Update 更新=&gt; 是否允许组件更新</span><br><span class="line">            // SCU</span><br><span class="line">            shouldComponentUpdate(props,state)&#123;</span><br><span class="line">                // shouldComponentUpdate 第一个 ....</span><br><span class="line">                // 第二个参数是修改了之后的 state</span><br><span class="line">                console.log(&#x27;state in the scu&#x27;,state)</span><br><span class="line"></span><br><span class="line">                // react通过shouldComponentUpdate 让我们具备控制是否更新视图的能力</span><br><span class="line">                // 因为有些时候有些值变化并不会直接体现在视图上面 这个时候如果不控制那么 react的组件也会走完一整个更新渲染的流程非常的浪费性能</span><br><span class="line">                if(state.ct &lt; 5) return false; // 不更新</span><br><span class="line">                return true; // 更新</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            UNSAFE_componentWillMount()&#123;</span><br><span class="line">                console.log(&#x27;componentWillMount  执行&#x27;)</span><br><span class="line">            &#125;</span><br><span class="line">            render()&#123;</span><br><span class="line">                // 挂载阶段当中 类似于 beforeMount 对应vue的生命周期</span><br><span class="line">                // 更新阶段当中  类似于 beforeUpdate(但这个并不完全一样)</span><br><span class="line">               console.log(&#x27;render执行&#x27;)</span><br><span class="line">                return (</span><br><span class="line">                    &lt;div&gt;</span><br><span class="line">                        我是cp1</span><br><span class="line">                        &lt;div&gt; ct: &#123; this.state.ct &#125; &lt;/div&gt;</span><br><span class="line">                        &lt;button onClick=&#123; ()=&gt; this.setState(&#123; ct: this.state.ct+1 &#125;)  &#125;&gt;让ct递增&lt;/button&gt;</span><br><span class="line">                        &lt;hr /&gt;</span><br><span class="line">                       &#123; this.state.showCp2 &amp;&amp; &lt;Cp2&gt;&lt;/Cp2&gt; &#125;</span><br><span class="line">                       &lt;button onClick=&#123;()=&gt;&#123;</span><br><span class="line">                            this.setState(&#123;</span><br><span class="line">                                showCp2: !this.state.showCp2</span><br><span class="line">                            &#125;)</span><br><span class="line">                       &#125;&#125;&gt;</span><br><span class="line">                             切换渲染 cp2组件</span><br><span class="line">                       &lt;/button&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                )</span><br><span class="line">             &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ReactDOM.render( &lt;Cp1&gt;&lt;/Cp1&gt;, document.getElementById(&quot;app&quot;) )</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .kfc&#123;</span><br><span class="line">            color:red</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="render-先执行"><a href="#render-先执行" class="headerlink" title="render 先执行"></a>render 先执行</h2><h2 id="getSnapshotBeforeUpdate"><a href="#getSnapshotBeforeUpdate" class="headerlink" title="getSnapshotBeforeUpdate"></a>getSnapshotBeforeUpdate</h2><p>发生在 render 之后 componentDidUpdate 之前执行 而且是在页面发生更新渲染到 dom 树之前</p><p>api 的语义上是说 在实际更新之前 你可以拍个照 留个已记录 传给 componentDidUpdate</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;https://lf3-cdn-tos.bytecdntp.com/cdn/expire-1-M/react/16.14.0/umd/react.development.js&quot; type=&quot;application/javascript&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;https://lf26-cdn-tos.bytecdntp.com/cdn/expire-1-M/react-dom/16.14.0/umd/react-dom.development.js&quot; type=&quot;application/javascript&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;https://lf3-cdn-tos.bytecdntp.com/cdn/expire-1-M/babel-standalone/7.0.0-alpha.20/babel.min.js&quot; type=&quot;application/javascript&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line"></span><br><span class="line">        class Cp1 extends React.Component &#123;</span><br><span class="line">            constructor()&#123;</span><br><span class="line">                super();</span><br><span class="line">                this.state = &#123;</span><br><span class="line">                    ct:1,</span><br><span class="line">                    arr: []</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            componentDidUpdate(prevProps,prevState,snapshot)&#123;</span><br><span class="line">                // 关键是有记得  componentDidUpdate 会得到哪些参数？？</span><br><span class="line">                    console.log(&#x27;componentDidUpdate 更新完成之后执行&#x27;,snapshot);</span><br><span class="line">                    document.querySelector(&#x27;.box&#x27;).style.top = snapshot + 23 + &#x27;px&#x27;;</span><br><span class="line">            &#125;</span><br><span class="line">            // 在 render 之后   componentDidUpdate 之前执行 而且是在页面发生更新渲染到dom树之前</span><br><span class="line">            // get  获取  snapshot 快照/照片 beforeUpdate 更新之前</span><br><span class="line">            // api的语义上是说 在实际更新之前 你可以拍个照 留个已记录 传给 componentDidUpdate</span><br><span class="line">            getSnapshotBeforeUpdate()&#123;</span><br><span class="line">                console.log(&#x27;getSnapshotBeforeUpdate 执行&#x27;)</span><br><span class="line">                // 返回的值就是传递给 componentDidUpdate 的第三个参数</span><br><span class="line">                // getSnapshotBeforeUpdate  作用不是作为生命周期使用</span><br><span class="line">                // 而且给我们一种在dom更新前获取一些实际dom更新之前的某些信息丢给  componentDidUpdate 使用</span><br><span class="line"></span><br><span class="line">                // 获取当前的mylist的高度</span><br><span class="line">                return document.querySelector(&#x27;.mylist&#x27;).clientHeight</span><br><span class="line">            &#125;</span><br><span class="line">            add = ()=&gt;&#123;</span><br><span class="line">                this.state.arr.push( Date.now() );</span><br><span class="line">                this.setState(&#123;</span><br><span class="line">                    arr: [ ...this.state.arr]</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">            render()&#123;</span><br><span class="line">                console.log(&#x27;render 执行&#x27;)</span><br><span class="line">                return (</span><br><span class="line">                    &lt;div&gt;</span><br><span class="line">                         &lt;div&gt;  &#123; this.state.ct&#125;     &lt;/div&gt;</span><br><span class="line">                         &lt;button onClick=&#123; ()=&gt;&#123;</span><br><span class="line">                            this.setState(&#123;</span><br><span class="line">                                ct: this.state.ct+1</span><br><span class="line">                            &#125;)</span><br><span class="line">                          &#125; &#125;&gt; 让ct递增&lt;/button&gt;</span><br><span class="line">                          &lt;div&gt; arr的长度 &lt;/div&gt;</span><br><span class="line">                          &lt;div class=&quot;mylist&quot;&gt;</span><br><span class="line">                                &#123; this.state.arr.map( item =&gt; &lt;div&gt;&#123;item&#125;&lt;/div&gt;  ) &#125;</span><br><span class="line">                                &lt;div class=&quot;box&quot;&gt;&lt;/div&gt;</span><br><span class="line">                           &lt;/div&gt;</span><br><span class="line">                          &lt;button onClick=&#123;this.add&#125;&gt; 添加内容到arr当中z &lt;/button&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                )</span><br><span class="line">             &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ReactDOM.render( &lt;Cp1&gt;&lt;/Cp1&gt;, document.getElementById(&quot;app&quot;) )</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .mylist&#123;</span><br><span class="line">            position: relative;</span><br><span class="line">            width: 200px;</span><br><span class="line">            border: 1px solid #000;</span><br><span class="line">        &#125;</span><br><span class="line">        .box&#123;</span><br><span class="line">            width: 50px;</span><br><span class="line">            height: 50px;</span><br><span class="line">            border: 1px solid red;</span><br><span class="line">            position: absolute;</span><br><span class="line">            right:0;</span><br><span class="line">            bottom:0;</span><br><span class="line">            transform: translateX(100%);</span><br><span class="line">            transition: top 300ms linear 200ms;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .kfc&#123;</span><br><span class="line">            color:red</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="componentDidUpdate-preProps-preState-snaphot"><a href="#componentDidUpdate-preProps-preState-snaphot" class="headerlink" title="componentDidUpdate(preProps,preState,snaphot)"></a>componentDidUpdate(preProps,preState,snaphot)</h2><p>在组件更新完整之后执行，重点关注三个参数分别是什么</p><p>切记不要在 componentDidUpdate 随意的使用 setState</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;https://lf3-cdn-tos.bytecdntp.com/cdn/expire-1-M/react/16.14.0/umd/react.development.js&quot; type=&quot;application/javascript&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;https://lf26-cdn-tos.bytecdntp.com/cdn/expire-1-M/react-dom/16.14.0/umd/react-dom.development.js&quot; type=&quot;application/javascript&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;https://lf3-cdn-tos.bytecdntp.com/cdn/expire-1-M/babel-standalone/7.0.0-alpha.20/babel.min.js&quot; type=&quot;application/javascript&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line"></span><br><span class="line">        class Cp1 extends React.Component &#123;</span><br><span class="line">            constructor()&#123;</span><br><span class="line">                super();</span><br><span class="line">                this.state = &#123;</span><br><span class="line">                    ct:1,</span><br><span class="line">                    price: 20,</span><br><span class="line">                    a: 5,</span><br><span class="line">                    b: 6,</span><br><span class="line">                    total : 20</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            componentDidUpdate(prevProps,prevState)&#123;</span><br><span class="line">                // componentDidUpdate函数会得到三个回调参数</span><br><span class="line">                // 第一个是变化之前的 props</span><br><span class="line">                // 第二个是变化之前的 state</span><br><span class="line">                // 这个是之前的？那么当前的呢？？？？？   this.props  this.state</span><br><span class="line">                console.log(&#x27;更新完成之后执行&#x27;);</span><br><span class="line">                // 我希望是在更新完成之后 就主动的去修改total的值</span><br><span class="line">                // setState 是不是修改状态？ yes =&gt; 那么会不会引起视图的更新？ yes =&gt; 会不会执行 componentDidUpdate?</span><br><span class="line">                // componentDidUpdate 会不会让里面的setState再执行？？？ 死循环了没？</span><br><span class="line">                // 官方的说辞 尽量不要在 componentDidUpdate里面调用setState</span><br><span class="line">                // 错误的做法</span><br><span class="line">                this.setState(&#123;</span><br><span class="line">                    total: this.state.ct * this.state.price</span><br><span class="line">                &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            render()&#123;</span><br><span class="line">                return (</span><br><span class="line">                    &lt;div&gt;</span><br><span class="line">                         &lt;div&gt;</span><br><span class="line">                             数量 &#123; this.state.ct&#125;   *   价格 &#123; this.state.price &#125; =</span><br><span class="line">                             &#123; this.state.total &#125;</span><br><span class="line">                         &lt;/div&gt;</span><br><span class="line">                         &lt;button onClick=&#123; ()=&gt;&#123;</span><br><span class="line">                            this.setState(&#123;</span><br><span class="line">                                ct: this.state.ct+1</span><br><span class="line">                            &#125;)</span><br><span class="line">                          &#125; &#125;&gt; 让ct递增&lt;/button&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                )</span><br><span class="line">             &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ReactDOM.render( &lt;Cp1&gt;&lt;/Cp1&gt;, document.getElementById(&quot;app&quot;) )</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line"></span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .kfc&#123;</span><br><span class="line">            color:red</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>上面的代码执行之后会出现 内存溢出(死循环的提示)</p><p><img src="http://192.168.196.197:8000/data/img/1666340771269-6ed49761-5119-43e7-a161-07b34abd4c6d.png"></p><p>正确的 在 componentDidUpdate 当中调用 setState</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;https://lf3-cdn-tos.bytecdntp.com/cdn/expire-1-M/react/16.14.0/umd/react.development.js&quot; type=&quot;application/javascript&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;https://lf26-cdn-tos.bytecdntp.com/cdn/expire-1-M/react-dom/16.14.0/umd/react-dom.development.js&quot; type=&quot;application/javascript&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;https://lf3-cdn-tos.bytecdntp.com/cdn/expire-1-M/babel-standalone/7.0.0-alpha.20/babel.min.js&quot; type=&quot;application/javascript&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line"></span><br><span class="line">        class Cp1 extends React.Component &#123;</span><br><span class="line">            constructor()&#123;</span><br><span class="line">                super();</span><br><span class="line">                this.state = &#123;</span><br><span class="line">                    ct:1,</span><br><span class="line">                    price: 20,</span><br><span class="line">                    a: 5,</span><br><span class="line">                    b: 6,</span><br><span class="line">                    total : 20</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            componentDidUpdate(prevProps,prevState)&#123;</span><br><span class="line">                // componentDidUpdate函数会得到三个回调参数</span><br><span class="line">                // 第一个是变化之前的 props</span><br><span class="line">                // 第二个是变化之前的 state</span><br><span class="line">                // 这个是之前的？那么当前的呢？？？？？   this.props  this.state</span><br><span class="line">                console.log(&#x27;更新完成之后执行&#x27;);</span><br><span class="line">                // 我希望是在更新完成之后 就主动的去修改total的值</span><br><span class="line">                // setState 是不是修改状态？ yes =&gt; 那么会不会引起视图的更新？ yes =&gt; 会不会执行 componentDidUpdate?</span><br><span class="line">                // componentDidUpdate 会不会让里面的setState再执行？？？ 死循环了没？</span><br><span class="line">                // 官方的说辞 尽量不要在 componentDidUpdate里面调用setState</span><br><span class="line">                // 错误的做法</span><br><span class="line">                // this.setState(&#123;</span><br><span class="line">                //     total: this.state.ct * this.state.price</span><br><span class="line">                // &#125;)</span><br><span class="line">                // 如果非要使用 一定要是有条件的调用不然就会引起内存溢出(死循环)</span><br><span class="line">                // 正确的做法</span><br><span class="line">                // 用之前的state和当前的state进行对比 如果是price 或者是 ct变化了我们才去修改total</span><br><span class="line">                if(prevState.ct != this.state.ct)&#123;</span><br><span class="line">                   this.setState(&#123;</span><br><span class="line">                    total: this.state.ct * this.state.price</span><br><span class="line">                   &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">                if(prevState.price != this.state.price)&#123;</span><br><span class="line">                    this.setState(&#123;</span><br><span class="line">                     total: this.state.ct * this.state.price</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            render()&#123;</span><br><span class="line">                return (</span><br><span class="line">                    &lt;div&gt;</span><br><span class="line">                         &lt;div&gt;</span><br><span class="line">                             数量 &#123; this.state.ct&#125;   *   价格 &#123; this.state.price &#125; =</span><br><span class="line">                             &#123; this.state.total &#125;</span><br><span class="line">                         &lt;/div&gt;</span><br><span class="line">                         &lt;button onClick=&#123; ()=&gt;&#123;</span><br><span class="line">                            this.setState(&#123;</span><br><span class="line">                                ct: this.state.ct+1</span><br><span class="line">                            &#125;)</span><br><span class="line">                          &#125; &#125;&gt; 让ct递增&lt;/button&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                )</span><br><span class="line">             &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ReactDOM.render( &lt;Cp1&gt;&lt;/Cp1&gt;, document.getElementById(&quot;app&quot;) )</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line"></span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .kfc&#123;</span><br><span class="line">            color:red</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h1 id="卸载阶段"><a href="#卸载阶段" class="headerlink" title="卸载阶段"></a>卸载阶段</h1><h2 id="componetWillUnmount-组件即将卸载之前"><a href="#componetWillUnmount-组件即将卸载之前" class="headerlink" title="componetWillUnmount 组件即将卸载之前"></a>componetWillUnmount 组件即将卸载之前</h2><p>这里是清除定时器或者解除绑定监听的的最好时机</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;https://lf3-cdn-tos.bytecdntp.com/cdn/expire-1-M/react/16.14.0/umd/react.development.js&quot; type=&quot;application/javascript&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;https://lf26-cdn-tos.bytecdntp.com/cdn/expire-1-M/react-dom/16.14.0/umd/react-dom.development.js&quot; type=&quot;application/javascript&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;https://lf3-cdn-tos.bytecdntp.com/cdn/expire-1-M/babel-standalone/7.0.0-alpha.20/babel.min.js&quot; type=&quot;application/javascript&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line"></span><br><span class="line">        class Cp2  extends React.Component &#123;</span><br><span class="line">            //  component 组件 Will 即将  Unmount 卸载 =&gt; 组件即将卸载（vue2 当中的 beforeDestroy / vue3当中的 beforeUnmount)</span><br><span class="line">            componentWillUnmount()&#123;</span><br><span class="line">                console.log(&#x27;cp2组件的 componentWillUnmount 执行&#x27;)</span><br><span class="line">            &#125;</span><br><span class="line">            render()&#123;</span><br><span class="line">                return (</span><br><span class="line">                    &lt;div&gt; 我是Cp2组件  &lt;/div&gt;</span><br><span class="line">                )</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        class Cp1 extends React.Component &#123;</span><br><span class="line">            constructor()&#123;</span><br><span class="line">                super();</span><br><span class="line">                console.log(&#x27;constructor 执行&#x27;)</span><br><span class="line">                // beforeCreate 对应vue的生命周期</span><br><span class="line">                this.state  = &#123;</span><br><span class="line">                    ct: 1,</span><br><span class="line">                    showCp2: true</span><br><span class="line">                &#125;</span><br><span class="line">                // created 对应vue的生命周期</span><br><span class="line">            &#125;</span><br><span class="line">            // component 组件 did 完成  mount 挂载 =&gt; 挂载完成之后  ( vue 当中的mounted)</span><br><span class="line">            componentDidMount()&#123;</span><br><span class="line">                //console.log(&#x27;componentDidMount 执行&#x27;)</span><br><span class="line">            &#125;</span><br><span class="line">            // component 组件 did 完成  Update 更新 =&gt; 组件更新完成之后  （vue 当中的 updated)</span><br><span class="line">            componentDidUpdate()&#123;</span><br><span class="line">               console.log(&#x27;componentDidUpdate 执行&#x27;)</span><br><span class="line">            &#125;</span><br><span class="line">            // component 组件 will 即将  Update 更新 =&gt; 组件更新之前执行 ( vue 当中的beforeUpdate )</span><br><span class="line">            //  发生在 SCU 之后  在render之前</span><br><span class="line">            componentWillUpdate()&#123;</span><br><span class="line">                console.log(&#x27;componentWillUpdate  即将更新 执行&#x27;)</span><br><span class="line">            &#125;</span><br><span class="line">            // should是否允许 Component 组件 Update 更新=&gt; 是否允许组件更新</span><br><span class="line">            // SCU</span><br><span class="line">            shouldComponentUpdate(props,state)&#123;</span><br><span class="line">                // shouldComponentUpdate 第一个 ....</span><br><span class="line">                // 第二个参数是修改了之后的 state</span><br><span class="line">                console.log(&#x27;state in the scu&#x27;,state)</span><br><span class="line"></span><br><span class="line">                // react通过shouldComponentUpdate 让我们具备控制是否更新视图的能力</span><br><span class="line">                // 因为有些时候有些值变化并不会直接体现在视图上面 这个时候如果不控制那么 react的组件也会走完一整个更新渲染的流程非常的浪费性能</span><br><span class="line">                if(state.ct &lt; 5) return false; // 不更新</span><br><span class="line">                return true; // 更新</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            UNSAFE_componentWillMount()&#123;</span><br><span class="line">                console.log(&#x27;componentWillMount  执行&#x27;)</span><br><span class="line">            &#125;</span><br><span class="line">            render()&#123;</span><br><span class="line">                // 挂载阶段当中 类似于 beforeMount 对应vue的生命周期</span><br><span class="line">                // 更新阶段当中  类似于 beforeUpdate(但这个并不完全一样)</span><br><span class="line">               console.log(&#x27;render执行&#x27;)</span><br><span class="line">                return (</span><br><span class="line">                    &lt;div&gt;</span><br><span class="line">                        我是cp1</span><br><span class="line">                        &lt;div&gt; ct: &#123; this.state.ct &#125; &lt;/div&gt;</span><br><span class="line">                        &lt;button onClick=&#123; ()=&gt; this.setState(&#123; ct: this.state.ct+1 &#125;)  &#125;&gt;让ct递增&lt;/button&gt;</span><br><span class="line">                        &lt;hr /&gt;</span><br><span class="line">                       &#123; this.state.showCp2 &amp;&amp; &lt;Cp2&gt;&lt;/Cp2&gt; &#125;</span><br><span class="line">                       &lt;button onClick=&#123;()=&gt;&#123;</span><br><span class="line">                            this.setState(&#123;</span><br><span class="line">                                showCp2: !this.state.showCp2</span><br><span class="line">                            &#125;)</span><br><span class="line">                       &#125;&#125;&gt;</span><br><span class="line">                             切换渲染 cp2组件</span><br><span class="line">                       &lt;/button&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                )</span><br><span class="line">             &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ReactDOM.render( &lt;Cp1&gt;&lt;/Cp1&gt;, document.getElementById(&quot;app&quot;) )</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .kfc&#123;</span><br><span class="line">            color:red</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="被抛弃的的生命周期"><a href="#被抛弃的的生命周期" class="headerlink" title="被抛弃的的生命周期"></a>被抛弃的的生命周期</h2><p>下面的三个生命周期 都是在 18 版本当中被移除的 api 官方是不推荐我们使用的。所以特地在前面加上了 UNSAFE 的前缀 标识不安全(以为你写了 以后的兼容性就会出现问题 不能快速的移植到新的 react 版本当中)</p><p>( 这个三个生命周期实际使用的时候可以不加上 UNSAFE_ 在 16.x 的版本当中 )</p><ul><li><a href="https://react.yubolun.com/docs/react-component.html#unsafe_componentwillupdate">UNSAFE_componentWillUpdate()</a>  发生在组件即将更新 -&gt; 建议使用 SCU 替代</li><li><a href="https://react.yubolun.com/docs/react-component.html#unsafe_componentwillreceiveprops">UNSAFE_componentWillReceiveProps()</a>  接受的自定义属性或者是状态变化-&gt; xxxx</li><li><a href="https://react.yubolun.com/docs/react-component.html#unsafe_componentwillmount">UNSAFE_componentWillMount()</a>  发生在组件即将挂载之前 -&gt; 建议在 render return 之前</li></ul><p><img src="http://192.168.196.197:8000/data/img/1666337343058-362265e2-fb3b-4b18-a586-a3c3a61f0517.png"></p><p><img src="http://192.168.196.197:8000/data/img/1666337371919-f16a7a2c-da69-47c5-b3bf-8aefcb5f8fb8.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;https://lf3-cdn-tos.bytecdntp.com/cdn/expire-1-M/react/16.14.0/umd/react.development.js&quot; type=&quot;application/javascript&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;https://lf26-cdn-tos.bytecdntp.com/cdn/expire-1-M/react-dom/16.14.0/umd/react-dom.development.js&quot; type=&quot;application/javascript&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;https://lf3-cdn-tos.bytecdntp.com/cdn/expire-1-M/babel-standalone/7.0.0-alpha.20/babel.min.js&quot; type=&quot;application/javascript&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line"></span><br><span class="line">        class Cp1 extends React.Component &#123;</span><br><span class="line">            constructor()&#123;</span><br><span class="line">                super();</span><br><span class="line">                this.state = &#123;</span><br><span class="line">                    ct:1,</span><br><span class="line">                    price: 20,</span><br><span class="line">                    a: 5,</span><br><span class="line">                    b: 6,</span><br><span class="line">                    total : 20</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            componentDidUpdate()&#123;</span><br><span class="line">                console.log(&#x27;更新完成之后执行&#x27;);</span><br><span class="line">                // 我希望是在更新完成之后 就主动的去修改total的值</span><br><span class="line">                // setState 是不是修改状态？ yes =&gt; 那么会不会引起视图的更新？ yes =&gt; 会不会执行 componentDidUpdate?</span><br><span class="line">                // componentDidUpdate 会不会让里面的setState再执行？？？ 死循环了没？</span><br><span class="line">                // 官方的说辞 尽量不要在 componentDidUpdate里面调用setState</span><br><span class="line">                // 如果非要使用 一定要是有条件的调用不然就会引起内存溢出(死循环)</span><br><span class="line">                this.setState(&#123;</span><br><span class="line">                    total: this.state.ct * this.state.price</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            render()&#123;</span><br><span class="line">                return (</span><br><span class="line">                    &lt;div&gt;</span><br><span class="line">                         &lt;div&gt;</span><br><span class="line">                             数量 &#123; this.state.ct&#125;   *   价格 &#123; this.state.price &#125; =</span><br><span class="line">                             &#123; this.state.total &#125;</span><br><span class="line">                         &lt;/div&gt;</span><br><span class="line">                         &lt;button onClick=&#123; ()=&gt;&#123;</span><br><span class="line">                            this.setState(&#123;</span><br><span class="line">                                ct: this.state.ct+1</span><br><span class="line">                            &#125;)</span><br><span class="line">                          &#125; &#125;&gt; 让ct递增&lt;/button&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                )</span><br><span class="line">             &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ReactDOM.render( &lt;Cp1&gt;&lt;/Cp1&gt;, document.getElementById(&quot;app&quot;) )</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line"></span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        .kfc&#123;</span><br><span class="line">            color:red</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="官方的生命周期函数执行示意图"><a href="#官方的生命周期函数执行示意图" class="headerlink" title="官方的生命周期函数执行示意图"></a>官方的生命周期函数执行示意图</h2><p><a href="https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/">React lifecycle methods diagram</a></p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue3新特性:Teleport组件</title>
      <link href="/2022/02/07/Vue3%E6%96%B0%E7%89%B9%E6%80%A7-Teleport%E7%BB%84%E4%BB%B6/"/>
      <url>/2022/02/07/Vue3%E6%96%B0%E7%89%B9%E6%80%A7-Teleport%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="Teleport"><a href="#Teleport" class="headerlink" title="Teleport"></a>Teleport</h1><p><code>&lt;Teleport&gt;</code> 是一个内置组件，它可以将一个组件内部的一部分模板“传送”到该组件的 DOM 结构外层的位置去。</p><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>应用场景：一个组件模板的一部分在逻辑上从属于该组件，但从整个应用视图的角度来看，它在 DOM 中应该被渲染在整个 Vue 应用外部的其他地方。如模态框。</p><p>template</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click=&quot;open = true&quot;&gt;Open Modal&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;Teleport to=&quot;body&quot;&gt;</span><br><span class="line">  &lt;div v-if=&quot;open&quot; class=&quot;modal&quot;&gt;</span><br><span class="line">    &lt;p&gt;Hello from the modal!&lt;/p&gt;</span><br><span class="line">    &lt;button @click=&quot;open = false&quot;&gt;Close&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/Teleport&gt;</span><br></pre></td></tr></table></figure><p><code>&lt;Teleport&gt;</code> 接收一个 <code>to</code> prop 来指定传送的目标。<code>to</code> 的值可以是一个 CSS 选择器字符串，也可以是一个 DOM 元素对象。这段代码的作用就是告诉 Vue“把以下模板片段<strong>传送到 <code>body</code></strong> 标签下”。</p><p>你可以点击下面这个按钮，然后通过浏览器的开发者工具，在 <code>&lt;body&gt;</code> 标签下找到模态框元素：</p><p>Open Modal</p><p>我们也可以将 <code>&lt;Teleport&gt;</code> 和 <a href="https://cn.vuejs.org/guide/built-ins/transition.html"><code>&lt;Transition&gt;</code></a> 结合使用来创建一个带动画的模态框。你可以看看<a href="https://cn.vuejs.org/examples/#modal">这个示例</a>。</p><p>TIP</p><p><code>&lt;Teleport&gt;</code> 挂载时，传送的 <code>to</code> 目标必须已经存在于 DOM 中。理想情况下，这应该是整个 Vue 应用 DOM 树外部的一个元素。如果目标元素也是由 Vue 渲染的，你需要确保在挂载 <code>&lt;Teleport&gt;</code> 之前先挂载该元素。</p><h2 id="搭配组件使用"><a href="#搭配组件使用" class="headerlink" title="搭配组件使用"></a>搭配组件使用</h2><p><code>&lt;Teleport&gt;</code> 只改变了渲染的 DOM 结构，它不会影响组件间的逻辑关系。也就是说，如果 <code>&lt;Teleport&gt;</code> 包含了一个组件，那么该组件始终和这个使用了 <code>&lt;teleport&gt;</code> 的组件保持逻辑上的父子关系。传入的 props 和触发的事件也会照常工作。</p><p>这也意味着来自父组件的注入也会按预期工作，子组件将在 Vue Devtools 中嵌套在父级组件下面，而不是放在实际内容移动到的地方。</p><h2 id="禁用-Teleport"><a href="#禁用-Teleport" class="headerlink" title="禁用 Teleport"></a>禁用 Teleport</h2><p>在某些场景下可能需要视情况禁用 <code>&lt;Teleport&gt;</code>。举例来说，我们想要在桌面端将一个组件当做浮层来渲染，但在移动端则当作行内组件。我们可以通过对 <code>&lt;Teleport&gt;</code> 动态地传入一个 <code>disabled</code> prop 来处理这两种不同情况。</p><p>template</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Teleport :disabled=&quot;isMobile&quot;&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;/Teleport&gt;</span><br></pre></td></tr></table></figure><p>这里的 <code>isMobile</code> 状态可以根据 CSS media query 的不同结果动态地更新。</p><h2 id="多个-Teleport-共享目标"><a href="#多个-Teleport-共享目标" class="headerlink" title="多个 Teleport 共享目标"></a>多个 Teleport 共享目标</h2><p>一个可重用的模态框组件可能同时存在多个实例。对于此类场景，多个 <code>&lt;Teleport&gt;</code> 组件可以将其内容挂载在同一个目标元素上，而顺序就是简单的顺次追加，后挂载的将排在目标元素下更后面的位置上。</p><p>比如下面这样的用例：</p><p>template</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;Teleport to=&quot;#modals&quot;&gt;</span><br><span class="line">  &lt;div&gt;A&lt;/div&gt;</span><br><span class="line">&lt;/Teleport&gt;</span><br><span class="line">&lt;Teleport to=&quot;#modals&quot;&gt;</span><br><span class="line">  &lt;div&gt;B&lt;/div&gt;</span><br><span class="line">&lt;/Teleport&gt;</span><br></pre></td></tr></table></figure><p>渲染的结果为：</p><p>html</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;modals&quot;&gt;</span><br><span class="line">  &lt;div&gt;A&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;B&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VsCode配置ts开发环境</title>
      <link href="/2021/10/01/VsCode%E9%85%8D%E7%BD%AEts%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
      <url>/2021/10/01/VsCode%E9%85%8D%E7%BD%AEts%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h1 id="打造最舒服的-ts-开发环境"><a href="#打造最舒服的-ts-开发环境" class="headerlink" title="打造最舒服的 ts 开发环境"></a>打造最舒服的 ts 开发环境</h1><p>本文将介绍 VS Code 下的 TypeScript 环境搭建：插件以及配置项。对于 TS 文件的执行，我们会介绍 ts-node、ts-node-dev 等工具，帮助你快速验证 TS 代码的执行结果。而如果你只想快速开始学习，我们也会介绍 TypeScript 官方提供的 TypeScript Playground，利用它你可以快速开始编写及分享 TS 代码。最后，我们还会介绍如何通过 TS 声明的方式来检查类型兼容性。</p><h2 id="VS-Code-配置与插件"><a href="#VS-Code-配置与插件" class="headerlink" title="VS Code 配置与插件"></a>VS Code 配置与插件</h2><p>VS Code 本身就是由 TypeScript 编写的，因此它对 TypeScript 有着非常全面的支持，包括类型检查、补全等功能，我们需要的两个 TS 插件都来自于社区，这两个插件分别提供了<strong>类型的自动导入</strong>，和<strong>快速移动 TypeScript 文件</strong>的能力。</p><p>首先是  <a href="https://link.juejin.cn/?target=https://marketplace.visualstudio.com/items?itemName=pmneo.tsimporter">TypeScript Importer</a> 。这一插件会收集你项目内所有的类型定义，在你敲出:时提供这些类型来进行补全。如果你选择了一个，它还会自动帮你把这个类型导入进来。效果如图所示：</p><p><img src="http://192.168.196.197:8000/data/img/1662464637444-258e3aa7-3f82-4fed-b275-92677ff70c6e.webp"></p><p>这一功能在日常开发中真得非常非常好用，尤其是当项目里有数百个声明分散在各个文件中时。</p><p><a href="https://link.juejin.cn/?target=https://marketplace.visualstudio.com/items?itemName=stringham.move-ts">Move TS</a>，这一插件在重构以及像我们这样写 demo 的场景下很有帮助。它可以让你通过编辑文件的路径，直接修改项目的目录结构。比如从 home&#x2F;project&#x2F;learn-interface.ts  修改成  home&#x2F;project&#x2F;interface-notes&#x2F;interface-extend.ts，这个插件会自动帮你把文件目录更改到对应的样子，并且更新其他文件中对这一文件的导入语句。</p><p><img src="http://192.168.196.197:8000/data/img/1662464637487-584e61df-0fef-4464-aa28-7758df3fbc56.webp"></p><p>当然，对于 VS Code 内置的 TypeScript 支持，我们也可以通过一些配置项获得更好的开发体验。首先，你需要通过 Ctrl(Command) + Shift + P 打开命令面板，找到「打开工作区设置」这一项。</p><p><img src="http://192.168.196.197:8000/data/img/1662464637453-b6249345-640b-47d6-93e8-b11490d479bf.webp"></p><p>然后，在打开的设置中输入 typescript，筛选出所有 TypeScript 有关的配置，点击左侧的”TypeScript”，这里才是官方内置的配置。</p><p><img src="http://192.168.196.197:8000/data/img/1662464637459-89a42b71-771c-4283-bf6e-cc4feeaf81c3.webp"></p><p>我们需要做的就是开启一些代码提示功能（hints），我们知道 TS 能够在很多地方进行类型地自动推导，但你往往要把鼠标悬浮在代码上才能看到推导得到的类型，其实我们可以通过配置将这些推导类型显示出来：</p><p>在前面配置搜索处，搜索 ‘typescript Inlay Hints’，展示的配置就都是提示相关的了，推荐开启的有这么几个：</p><ul><li>Function Like Return Types，显示推导得到的函数返回值类型；</li><li>Parameter Names，显示函数入参的名称；</li><li>Parameter Types，显示函数入参的类型；</li><li>Variable Types，显示变量的类型。</li></ul><p>当然，并不是所有人都习惯这样的显示方式，你可以根据自己的需要进行调整。除了这些提示的配置以外，VS Code 还支持了百余项 TS 配置，你可以看看是否有你需要的配置。</p><h3 id="其他插件"><a href="#其他插件" class="headerlink" title="其他插件"></a>其他插件</h3><p>除了 TS 强相关的插件与配置，还有一些额外的、能提升你学习效率的插件，你可以依据自己的喜好进行添加，以下的插件列表将会不定期进行更新。</p><ul><li><a href="https://link.juejin.cn/?target=https://marketplace.visualstudio.com/items?itemName=PhilHindle.errorlens">ErrorLens</a>，这一插件能够把你的 VS Code 底部问题栏的错误下直接显示到代码文件中的对应位置，比如这样：<img src="http://192.168.196.197:8000/data/img/1662464638266-b8c69531-4ce7-4025-bc37-1697c0fbf140.webp"></li></ul><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h2 id="TS-文件的快速执行：ts-node-与-ts-node-dev"><a href="#TS-文件的快速执行：ts-node-与-ts-node-dev" class="headerlink" title="TS 文件的快速执行：ts-node 与 ts-node-dev"></a>TS 文件的快速执行：ts-node 与 ts-node-dev</h2><p>当然，如果你主要是想执行 TypeScript 文件，就像  node index.js  这样快速地验证代码逻辑，这个时候你就需要  <a href="https://link.juejin.cn/?target=https://github.com/TypeStrong/ts-node">ts-node</a>  以及  <a href="https://link.juejin.cn/?target=https://github.com/wclr/ts-node-dev">ts-node-dev</a>  这一类工具了。它们能直接执行 ts 文件，并且支持监听文件重新执行。同时，它们也支持跳过类型检查这一步骤来获得更快的执行体验。</p><p>对于 ts-node，你可以将其安装到项目本地或直接全局安装，我个人更推荐安装到全局然后配置 alias 快速启动，像  tsn index.ts  这样。执行以下命令将 ts-node 与 typescript 安装到全局：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">npm i ts-node typescript -g</span><br><span class="line"></span><br><span class="line">然后，在项目中执行以下命令创建 TypeScript 的项目配置文件： tsconfig.json。</span><br><span class="line"></span><br><span class="line">npx typescript --init // 如果全局安装了 TypeScript，可以这么做 tsc --init</span><br><span class="line"></span><br><span class="line">接着，创建一个 TS 文件：</span><br><span class="line"></span><br><span class="line">console.**log**(&quot;Hello TypeScript&quot;);</span><br><span class="line"></span><br><span class="line">再使用 ts-node 执行：</span><br><span class="line"></span><br><span class="line">ts-node index.ts</span><br></pre></td></tr></table></figure><p>如果一切正常，此时你的终端能够正确地输出字符。ts-node 可以通过两种方式进行配置，在 tsconfig 中新增  ‘ts-node’  字段，或在执行 ts-node 时作为命令行的参数，这里我们主要介绍通过命令行进行常用配置的方式。</p><ul><li>-P,–project：指定你的 tsconfig 文件位置。默认情况下 ts-node 会查找项目下的 tsconfig.json 文件，如果你的配置文件是  tsconfig.script.json、tsconfig.base.json  这种，就需要使用这一参数来进行配置了。</li><li>-T, –transpileOnly：禁用掉执行过程中的类型检查过程，这能让你的文件执行速度更快，且不会被类型报错卡住。这一选项的实质是使用了 TypeScript Compiler API 中的 transpileModule 方法，我们会在后面的章节详细讲解。</li><li>–swc：在 transpileOnly 的基础上，还会使用 swc 来进行文件的编译，进一步提升执行速度。</li><li>–emit：如果你不仅是想要执行，还想顺便查看下产物，可以使用这一选项来把编译产物输出到  .ts-node  文件夹下（需要同时与  –compilerHost  选项一同使用）。</li></ul><p>除了直接使用 ts-node 以外，你也可以通过 node + require hook 的形式来执行 TS 文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -r ts-node/register index.ts</span><br></pre></td></tr></table></figure><p>但此时，如果想要传递参数给 ts-node ，你就需要使用环境变量了，比如要传递之前的 transpileOnly 选项：</p><p>TS_NODE_TRANSPILE_ONLY&#x3D;true node -r ts-node&#x2F;register index.ts</p><p>关于选项对应的环境变量，请参考 ts-node 的官方文档了解更多。</p><p>ts-node 本身并不支持自动地监听文件变更然后重新执行，而这一能力又是某些项目场景下的刚需，如 NodeJs API 的开发。因此，我们需要  <a href="https://link.juejin.cn/?target=https://github.com/wclr/ts-node-dev">ts-node-dev</a>  库来实现这一能力。ts-node-dev 基于  <a href="https://link.juejin.cn/?target=https://github.com/fgnass/node-dev">node-dev</a>（你可以理解一个类似 nodemon 的库，提供监听文件重新执行的能力） 与  <a href="https://link.juejin.cn/?target=https://github.com/TypeStrong/ts-node">ts-node</a>  实现，并在重启文件进程时共享同一个 TS 编译进程，避免了每次重启时需要重新实例化编译进程等操作。</p><p>首先，我们还是在全局安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm i ts-node-dev -g</span><br><span class="line"></span><br><span class="line">ts-node-dev 在全局提供了 tsnd 这一简写，你可以运行 tsnd 来检查安装情况。最常见的使用命令是这样的：</span><br><span class="line"></span><br><span class="line">ts-node-dev --respawn --transpile-only app.ts</span><br></pre></td></tr></table></figure><p>respawn 选项启用了监听重启的能力，而 transpileOnly 提供了更快的编译速度。你可以查看官方仓库来了解更多选项，但在大部分场景中以上这个命令已经足够了。</p><h2 id="更方便的类型兼容性检查"><a href="#更方便的类型兼容性检查" class="headerlink" title="更方便的类型兼容性检查"></a>更方便的类型兼容性检查</h2><p>某些时候，我们在进行类型比较时，需要使用一个具有具体类型的变量与一个类型进行赋值操作，比如下面这个例子中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">interface Foo &#123;</span><br><span class="line">  name: string;</span><br><span class="line">  age: number;</span><br><span class="line">&#125;</span><br><span class="line">interface Bar &#123;</span><br><span class="line">  name: string;</span><br><span class="line">  job: string;</span><br><span class="line">&#125;</span><br><span class="line">let foo:Foo = &#123;</span><br><span class="line">  name: &#x27;林不渡&#x27;,</span><br><span class="line">  age: 18</span><br><span class="line">&#125;</span><br><span class="line">let bar:Bar = &#123;</span><br><span class="line">  name: &#x27;林不渡&#x27;,</span><br><span class="line">  job: &#x27;fe&#x27;</span><br><span class="line">&#125;</span><br><span class="line">foo = bar;</span><br></pre></td></tr></table></figure><p>在“只是想要进行类型比较”的前提下，其实并没有必要真的去声明两个变量，即涉及了值空间的操作。我们完全可以只在类型空间中（你可以理解为<strong>用于存放 TypeScript 类型信息的内存空间</strong>）比较这些类型，只需要使用 declare 关键字：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">interface Foo &#123;</span><br><span class="line">  name: string;</span><br><span class="line">  age: number;</span><br><span class="line">&#125;</span><br><span class="line">interface Bar &#123;</span><br><span class="line">  name: string;</span><br><span class="line">  job: string;</span><br><span class="line">&#125;</span><br><span class="line">declare let foo: Foo;</span><br><span class="line">declare let bar: Bar;</span><br><span class="line">foo = bar;</span><br></pre></td></tr></table></figure><p>你可以理解为在开始时的例子，我们使用一个值空间存放这个变量具体的属性，一个类型空间存放这个变量的类型。而通过 declare 关键字，我们声明了一个仅在类型空间存在的变量，它在运行时完全不存在，这样就避免了略显繁琐的属性声明。</p><p>对于类型兼容的检查，除了两两声明然后进行赋值以外，我们还可以通过工具类型的形式，如  <a href="https://link.juejin.cn/?target=https://www.npmjs.com/package/tsd">tsd</a>  这个 npm 包提供的一系列工具类型，能帮助你进行声明式的类型检查：：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import &#123; expectType &#125; from &#x27;tsd&#x27;;</span><br><span class="line">expectType&lt;string&gt;(&quot;linbudu&quot;); // √</span><br><span class="line">expectType&lt;string&gt;(599); // ×</span><br></pre></td></tr></table></figure><p>这一部分的内容并不是初学需要掌握的，但你可以选择提前用起来，不必急着去理解具体的实现原理。</p><p>它的结构大致是这样：expectType&lt;你预期的类型&gt;(表达式或变量等)，除了  expectType（检查预期类型与表达式或变量的类型是否一致），tsd 还提供了  expectNotType（检查预期类型与表达式或变量的类型是否不同）、expectAssignable（检查表达式或变量的类型是否能赋值给预期类型）等工具类型，其中涉及工具类型与泛型的知识，我们会在后面的课程中一一讲解。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我们了解了 TypeScript 开发环境的搭建，包括了 VS Code 的配置、插件，使用 Playground 作为一个简易又强大的临时编辑器，以及如何使用 ts-node 与 ts-node-dev 来快速执行你的 ts 文件。在最后，我们稍微提前了一些对后面学习大有裨益的知识，即通过类型声明（declare）与 tsd 来进行更方便的类型兼容性检查。</p>]]></content>
      
      
      <categories>
          
          <category> Vscode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Featherjs快速创建服务端</title>
      <link href="/2021/05/01/Featherjs%E5%BF%AB%E9%80%9F%E5%88%9B%E5%BB%BA%E6%9C%8D%E5%8A%A1%E7%AB%AF/"/>
      <url>/2021/05/01/Featherjs%E5%BF%AB%E9%80%9F%E5%88%9B%E5%BB%BA%E6%9C%8D%E5%8A%A1%E7%AB%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="安装构建工具"><a href="#安装构建工具" class="headerlink" title="安装构建工具"></a>安装构建工具</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @feathersjs/cli -g</span><br></pre></td></tr></table></figure><h2 id="创建一个-Feather-应用"><a href="#创建一个-Feather-应用" class="headerlink" title="创建一个 Feather 应用"></a>创建一个 Feather 应用</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir feathers-chat  // 创建一个目录  feathers-chat是文件夹名称你可以修改</span><br><span class="line">cd feathers-chat/   // 进入到这个目录</span><br><span class="line">feathers generate app  // 创建应用</span><br></pre></td></tr></table></figure><h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><p>config 目录下修改 default.json 修改正确的 mysql 的链接信息 修改为你真是的 mysql 的链接地址<br>如果你的数据库是有密码的还需要去设置一个 密码<br>在 src 目录下的 sequelize.ts 文件进行设置</p><h2 id="新建服务"><a href="#新建服务" class="headerlink" title="新建服务"></a>新建服务</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">feathers generate service</span><br></pre></td></tr></table></figure><h2 id="关于字段的描述"><a href="#关于字段的描述" class="headerlink" title="关于字段的描述"></a>关于字段的描述</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  name:&#123;</span><br><span class="line">      type:  数据类型参考 后面的链接,</span><br><span class="line">      allowNull: 布尔值 是否允许为空,</span><br><span class="line">      defaultValue: 默认值,</span><br><span class="line">      primaryKey: 是否是组件,</span><br><span class="line">      autoIncrement: 是否自增,</span><br><span class="line">      unique: 是否唯一,</span><br><span class="line">      comment: 备注信息,</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以参考<br><a href="https://www.sequelize.cn/core-concepts/model-basics#%E5%88%97%E5%8F%82%E6%95%B0">https://www.sequelize.cn/core-concepts/model-basics#%E5%88%97%E5%8F%82%E6%95%B0</a></p>]]></content>
      
      
      <categories>
          
          <category> Nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Featherjs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows开启webdav</title>
      <link href="/2021/02/12/Windows%E5%BC%80%E5%90%AFwebdav/"/>
      <url>/2021/02/12/Windows%E5%BC%80%E5%90%AFwebdav/</url>
      
        <content type="html"><![CDATA[<h2 id="先决条件："><a href="#先决条件：" class="headerlink" title="先决条件："></a>先决条件：</h2><p>• 由 IIS 安装创建的默认网站必须仍然存在。<br>• 必须安装 Internet Information Services 管理器。<br>• 必须安装 Windows 身份验证。<br>• 必须安装 WebDAV 重定向程序。</p><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><p>打开”添加角色和功能”<br>点击下一步直到服务器角色选择界面<br>在服务器角色界面勾选”Web 服务器(IIS)”<br>在功能界面勾选”WebDAV 重定向程序”<br>在角色服务界面勾选”Windows 身份验证、WebDAV 发布”<br>在确认界面勾选”如果需要，自动重新启动目标服务器”，弹窗点击”是”，然后点击”安装”<br>功能安装中，安装完成后会自动重启服务器<br>重启完成后自动弹出安装进度，等到安装完成后关闭窗口 WebDAV 服务配置<br>先创建用于 WebDAV 共享的文件<br>打开”Internet Information Services (IIS)管理器”<br>在”Default Web Site”上右击”添加虚拟目录”<br>填写别名为”WebDAV”，物理路径为”C:\WebDAV”<br>左侧选择”WebDAV”，打开”WebDAV 创作规则”<br>右击”添加制作规则”<br>添加制作规则，选择所有用户，给予读取、源、写入权限<br>左侧选择”WebDAV”，打开”身份验证”<br>启用”Windows 身份验证”，禁用”匿名身份验证”</p><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p>打开”映射网络驱动器”<br>填写 WebDAV 地址”<a href="http://localhost/WebDAV">http://localhost/WebDAV</a>“<br>连接成功后会弹出 WebDAV 的文件，到此为止可以愉快的使用 WebDAV</p><ul><li>补充一下，IIS 里 webdav 的 目录浏览 启用 IIS 里还要把上面一级目录 Default Web Site 的 WebDAV 启用，否则只能在浏览器 http 访问，添加映射网络驱动器会提示 windows 无法访问 <a href="http://xxx.xxx.xxx.xxx/">http://xxx.xxx.xxx.xxx</a> 还有文件夹权限!!!</li></ul>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webdav </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式之断言</title>
      <link href="/2020/11/05/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B9%8B%E6%96%AD%E8%A8%80/"/>
      <url>/2020/11/05/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B9%8B%E6%96%AD%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<p>有时我们只需要为一个模式找到那些在另一个模式之后或之前的匹配项。</p><p>有一种特殊的语法，称为“前瞻断言（lookahead）”和“后瞻断言（lookbehind）”。</p><p>首先，让我们从字符串中查找价格，例如  <code>1 turkey costs 30€</code>。即：一个数字，后跟<code>€</code>符号。</p><h2 id="前瞻断言"><a href="#前瞻断言" class="headerlink" title="前瞻断言"></a><a href="https://zh.javascript.info/regexp-lookahead-lookbehind#qian-zhan-duan-yan">前瞻断言</a></h2><p>语法为：<code>x(?=y)</code>，它表示“仅在后面是  <code>Y</code>  时匹配  <code>X</code>”。There may be any pattern instead of <code>X</code> and <code>Y</code>.</p><p>那么对于一个后面跟着  <code>€</code>  的整数，正则表达式应该为：<code>\d+(?=€)</code>。</p><p><code>let str = &quot;1 turkey costs 30€&quot;; alert( str.match(/\d+(?=€)/) ); // 30，数字 1 被忽略了，因为它后面没有 €</code></p><p>请注意：前瞻断言只是一个测试，括号  <code>(?=...)</code>  中的内容不包含在匹配结果  <code>30</code>  中。</p><p>当我们查找  <code>X(?=Y)</code>  时，正则表达式引擎会找到  <code>X</code>，然后检查其后是否有  <code>Y</code>。如果没有，则跳过潜在匹配，并继续搜索。</p><p>更复杂的测试也是可能的，例如  <code>X(?=Y)(?=Z)</code>  表示：</p><ol><li>寻找  <code>X</code>。</li><li>检查  <code>Y</code>  是否紧跟在  <code>X</code>  之后（如果不是则跳过）。</li><li>检查  <code>Z</code>  是否也在  <code>X</code>  之后（如果不是则跳过）。</li><li>如果两个测试都通过了，那么  <code>X</code>  是匹配的，否则继续搜索。</li></ol><p>换句话说，这样的模式意味着我们同时在寻找  <code>X</code>  后跟  <code>Y</code>  和  <code>Z</code>。</p><p>这只有在模式  <code>Y</code>  和  <code>Z</code>  不是互斥的情况下才可行。</p><p>例如，<code>\d+(?=\s)(?=.*30)</code>  查找后跟着空格  <code>(?=\s)</code>  的  <code>\d+</code>，并且有  <code>30</code>  在它之后的某个地方  <code>(?=.*30)</code>：</p><p><code>let str = &quot;1 turkey costs 30€&quot;; alert( str.match(/\d+(?=\s)(?=.*30)/) ); // 1</code></p><p>在我们给出的字符串中，与数字  <code>1</code>  完全匹配。</p><h2 id="否定的前瞻断言"><a href="#否定的前瞻断言" class="headerlink" title="否定的前瞻断言"></a><a href="https://zh.javascript.info/regexp-lookahead-lookbehind#fou-ding-de-qian-zhan-duan-yan">否定的前瞻断言</a></h2><p>假设我们想要一个数量，而不是来自同一字符串的价格。那是一个数字  <code>\d+</code>，后面不是  <code>€</code>。</p><p>为此，我们可以使用否定的前瞻断言。</p><p>语法是：<code>X(?!Y)</code>，意思是“搜索  <code>X</code>，但前提是后面没有  <code>Y</code>”。</p><p><code>let str = &quot;2 turkeys cost 60€&quot;; alert( str.match(/\d+\b(?!€)/g) ); // 2（价格不匹配）</code></p><h2 id="后瞻断言"><a href="#后瞻断言" class="headerlink" title="后瞻断言"></a><a href="https://zh.javascript.info/regexp-lookahead-lookbehind#hou-zhan-duan-yan">后瞻断言</a></h2><p>后瞻断言的浏览器兼容情况</p><p>请注意：非 V8 引擎的浏览器不支持后瞻断言，例如 Safari、Internet Explorer。</p><p>前瞻断言允许添加一个“后面要跟着什么”的条件判断。</p><p>后瞻断言也类似，只不过它是在相反的方向上进行条件判断。也就是说，它只允许匹配前面有特定字符串的模式。</p><p>语法为如下：</p><ul><li>肯定的后瞻断言：<code>(?&lt;=Y)X</code>，匹配  <code>X</code>，仅在前面是  <code>Y</code>  的情况下。</li><li>否定的后瞻断言：<code>(?&lt;!Y)X</code>，匹配  <code>X</code>，仅在前面不是  <code>Y</code>  的情况下。</li></ul><p>例如，让我们把价格换成美元。美元符号通常在数字前面，所以要查找  <code>$30</code>  我们将使用  <code>(?&lt;=\$)\d+</code> —— 一个前面带  <code>$</code>  的数值：</p><p><code>let str = &quot;1 turkey costs $30&quot;; // 美元符号被转义 \$ alert( str.match(/(?&lt;=\$)\d+/) ); // 30（跳过了仅仅是数字的值）</code></p><p>如果我们需要找到量词 —— 一个前面不带  <code>$</code>  的数字，我们可以使用否定的后瞻断言：<code>(?&lt;!\$)\d+</code></p><p><code>let str = &quot;2 turkeys cost $60&quot;; alert( str.match(/(?&lt;!\$)\b\d+/g) ); // 2（价格不匹配）</code></p><h2 id="捕获组"><a href="#捕获组" class="headerlink" title="捕获组"></a><a href="https://zh.javascript.info/regexp-lookahead-lookbehind#bu-huo-zu">捕获组</a></h2><p>一般来说，前瞻断言和后瞻断言括号中的内容不会成为结果的一部分。</p><p>例如，在模式  <code>\d+(?!€)</code>  中，<code>€</code>  符号就不会出现在匹配结果中。这是很自然的事：我们寻找一个数字  <code>\d+</code>，而  <code>(?=€)</code>  只是一个测试，表示要匹配的数字后面应该紧跟着  <code>€</code>  字符。</p><p>但在某些情况下，我们可能还想捕获前瞻断言和后瞻断言所匹配的内容，或者部分内容。这也是可行的。只需要将该部分包装在额外的括号中。</p><p>在下面的示例中，货币符号  <code>(€|kr)</code>  和金额一起被捕获了：</p><p><code>let str = &quot;1 turkey costs 30€&quot;; let regexp = /\d+(?=(€|kr))/; // €|kr 两侧有额外的括号 alert( str.match(regexp) ); // 30, €</code></p><p>后瞻断言也一样：</p><p><code>let str = &quot;1 turkey costs $30&quot;; let regexp = /(?&lt;=(\$|£))\d+/; alert( str.match(regexp) ); // 30, $</code></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><a href="https://zh.javascript.info/regexp-lookahead-lookbehind#zong-jie">总结</a></h2><p>当我们想根据前面&#x2F;后面的上下文匹配某些内容的时候，前瞻断言和后瞻断言（通常被称为“环视断言”）很有用。</p><p>对于简单的正则表达式，我们可以手动执行类似的操作。即：不管上下文，匹配所有可匹配的内容，然后在循环中根据上下文进行过滤。</p><p>请记住，<code>str.match</code>（没有修饰符  <code>g</code>）和  <code>str.matchAll</code>（总是）将匹配项作为具有  <code>index</code>  属性的数组返回，因此我们知道它在文本中的确切位置，并且可以检查上下文。</p><p>但通常环视断言更方便。</p><p>环视断言类型：</p><table><thead><tr><th>模式</th><th>类型</th><th>匹配</th></tr></thead><tbody><tr><td><code>X(?=Y)</code></td><td>肯定的前瞻断言</td><td><code>X</code>  后紧跟着  <code>Y</code></td></tr><tr><td><code>X(?!Y)</code></td><td>否定的前瞻断言</td><td><code>X</code>  后没紧跟着  <code>Y</code></td></tr><tr><td><code>(?&lt;=Y)X</code></td><td>肯定的后瞻断言</td><td><code>X</code>  紧跟在  <code>Y</code>  后面</td></tr><tr><td><code>(?&lt;!Y)X</code></td><td>否定的后瞻断言</td><td><code>X</code>  没紧跟在  <code>Y</code>  后面</td></tr></tbody></table><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p>[1] <a href="https://zh.javascript.info/regexp-lookahead-lookbehind">前瞻断言与后瞻断言 (javascript.info)</a></p>]]></content>
      
      
      <categories>
          
          <category> HTML5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式之修饰符u</title>
      <link href="/2020/11/02/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B9%8B%E4%BF%AE%E9%A5%B0%E7%AC%A6u/"/>
      <url>/2020/11/02/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B9%8B%E4%BF%AE%E9%A5%B0%E7%AC%A6u/</url>
      
        <content type="html"><![CDATA[<p>JavaScript 对字符串使用 <a href="https://en.wikipedia.org/wiki/Unicode">Unicode 编码</a>。大多数字符使用 2 个字节编码，但这种方式只能编码最多 65536 个字符。</p><p>这个范围不足以对所有可能的字符进行编码，这就是为什么使用 4 个字节对一些罕见的字符进行编码，比如 <code>𝒳</code>（数学符号 X）或 <code>😄</code>（笑脸），一些象形文字等等。</p><p>比如:</p><table><thead><tr><th>字符</th><th>Unicode</th><th>Unicode 中的字节数</th></tr></thead><tbody><tr><td>a</td><td><code>0x0061</code></td><td>2</td></tr><tr><td>≈</td><td><code>0x2248</code></td><td>2</td></tr><tr><td>𝒳</td><td><code>0x1d4b3</code></td><td>4</td></tr><tr><td>𝒴</td><td><code>0x1d4b4</code></td><td>4</td></tr><tr><td>😄</td><td><code>0x1f604</code></td><td>4</td></tr></tbody></table><p>所以像 <code>a</code> 和 <code>≈</code> 这样的字符占用 2 个字节，而 <code>𝒳</code>，<code>𝒴</code> 和 <code>😄</code> 的对应编码则更长，占用 4 个字节。</p><p>很久以前，当 JavaScript 被发明出来的时候，Unicode 编码要更加简单：当时没有 4 个字节的字符。所以，有些语言功能现在仍无法正确处理它们。</p><p>比如 <code>length</code> 认为这里有 2 个字符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alert(&#x27;😄&#x27;.length); // 2</span><br><span class="line">alert(&#x27;𝒳&#x27;.length); // 2</span><br></pre></td></tr></table></figure><p>默认情况下，正则表达式也会把一个 4 个字节的“长字符”当成一对 2 个字节长的字符。这将导致一些奇怪的结果。</p><p>与字符串有所不同的是，正则表达式有一个修饰符 <code>u</code> 被用以解决此类问题。当一个正则表达式带有这个修饰符后，4 个字节长的字符将被正确地处理。</p><h2 id="Unicode-属性-p-…"><a href="#Unicode-属性-p-…" class="headerlink" title="Unicode 属性 \p{…}"></a><a href="https://zh.javascript.info/regexp-unicode#unicode-shu-xing-p">Unicode 属性 \p{…}</a></h2><p>我们可以查找具有某种属性的字符，写作 <code>\p&#123;…&#125;</code>。为了使用 <code>\p&#123;…&#125;</code>，一个正则表达式必须使用修饰符 <code>u</code>。</p><p>举个例子，<code>\p&#123;Letter&#125;</code> 表示任何语言中的一个字母。我们也可以使用 <code>\p&#123;L&#125;</code>，因为 <code>L</code> 是 <code>Letter</code> 的一个别名。对于每种属性而言，几乎都存在对应的缩写别名。</p><p>在下面的例子中会找出来 3 种字母：英语、格鲁吉亚语和韩语。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let str = &quot;A ბ ㄱ&quot;;</span><br><span class="line"></span><br><span class="line">alert( str.match(/\p&#123;L&#125;/gu) ); // A,ბ,ㄱ</span><br><span class="line">alert( str.match(/\p&#123;L&#125;/g) ); // null（没有匹配项，因为没有修饰符 &quot;u&quot;）</span><br></pre></td></tr></table></figure><p>以下是主要的字符类别和它们对应的子类别：</p><ul><li>字母（Letter）<code>L</code>：<ul><li>小写（lowercase）<code>Ll</code>，</li><li>修饰（modifier）<code>Lm</code>，</li><li>首字母大写（titlecase）<code>Lt</code>，</li><li>大写（uppercase）<code>Lu</code>，</li><li>其它（other）<code>Lo</code>。</li></ul></li><li>数字（Number）<code>N</code>：<ul><li>十进制数字（decimal digit）<code>Nd</code>，</li><li>字母数字（letter number）<code>Nl</code>，</li><li>其它（other）<code>No</code>。</li></ul></li><li>标点符号（Punctuation）<code>P</code>：<ul><li>连接符（connector）<code>Pc</code>，</li><li>横杠（dash）<code>Pd</code>，</li><li>起始引号（initial quote）<code>Pi</code>，</li><li>结束引号（final quote）<code>Pf</code>，</li><li>开（open）<code>Ps</code>，</li><li>闭（close）<code>Pe</code>，</li><li>其它（other）<code>Po</code>。</li></ul></li><li>标记（Mark）<code>M</code>（accents etc）：<ul><li>间隔合并（spacing combining）<code>Mc</code>，</li><li>封闭（enclosing）<code>Me</code>，</li><li>非间隔（non-spacing）<code>Mn</code>。</li></ul></li><li>符号（Symbol）<code>S</code>：<ul><li>货币（currency）<code>Sc</code>，</li><li>修饰（modifier）<code>Sk</code>，</li><li>数学（math）<code>Sm</code>，</li><li>其它（other）<code>So</code>。</li></ul></li><li>分隔符（Separator）<code>Z</code>：<ul><li>行（line）<code>Zl</code>，</li><li>段落（paragraph）<code>Zp</code>，</li><li>空格（space）<code>Zs</code>。</li></ul></li><li>其它（Other）<code>C</code>：<ul><li>控制符（control）<code>Cc</code>，</li><li>格式（format）<code>Cf</code>，</li><li>未分配（not assigned）<code>Cn</code>，</li><li>私有（private use）<code>Co</code>，</li><li>代理伪字符（surrogate）<code>Cs</code>。</li></ul></li></ul><p>因此，比如说我们需要小写的字母，就可以写成 <code>\p&#123;Ll&#125;</code>，标点符号写作 <code>\p&#123;P&#125;</code> 等等。</p><p>也有其它派生的类别，例如：</p><ul><li><code>Alphabetic</code>（<code>Alpha</code>），包含了字母 <code>L</code>，加上字母数字 <code>Nl</code>（例如 Ⅻ —— 罗马数字 12），加上一些其它符号 <code>Other_Alphabetic</code>（<code>OAlpha</code>）。</li><li><code>Hex_Digit</code> 包括 16 进制数字 <code>0-9</code>，<code>a-f</code>。</li><li>……等等。</li></ul><p>Unicode 支持很多不同的属性，列出整个清单需要占用大量的篇幅，因此在这里列出相关的链接：</p><ul><li>列出一个字符的所有属性：<a href="https://unicode.org/cldr/utility/character.jsp">Unicode Utilities: Character Properties</a>.</li><li>按照属性列出所有的字符：<a href="https://unicode.org/cldr/utility/list-unicodeset.jsp">Unicode Utilities: UnicodeSet</a>.</li><li>属性的对应缩写形式：<a href="https://www.unicode.org/Public/UCD/latest/ucd/PropertyValueAliases.txt">https://www.unicode.org/Public/UCD/latest/ucd/PropertyValueAliases.txt</a>.</li><li>以文本格式整理的所有 Unicode 字符，包含了所有的属性：<a href="https://www.unicode.org/Public/UCD/latest/ucd/">Index of &#x2F;Public&#x2F;UCD&#x2F;latest&#x2F;ucd</a>.</li></ul><h3 id="举例：16-进制数字"><a href="#举例：16-进制数字" class="headerlink" title="举例：16 进制数字"></a><a href="https://zh.javascript.info/regexp-unicode#ju-li-16-jin-zhi-shu-zi">举例：16 进制数字</a></h3><p>举个例子，让我们来查找 16 进制数字，写作 <code>xFF</code> 其中 <code>F</code> 是一个 16 进制的数字（0…9 或者 A…F）。</p><p>一个 16 进制数字可以表示为 <code>\p&#123;Hex_Digit&#125;</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let regexp = /x\p&#123;Hex_Digit&#125;\p&#123;Hex_Digit&#125;/u;</span><br><span class="line"></span><br><span class="line">alert(&quot;number: xAF&quot;.match(regexp)); // xAF</span><br></pre></td></tr></table></figure><h3 id="举例：中文字符"><a href="#举例：中文字符" class="headerlink" title="举例：中文字符"></a><a href="https://zh.javascript.info/regexp-unicode#ju-li-zhong-wen-zi-fu">举例：中文字符</a></h3><p>让我们再来查找中文字符。</p><p>有一个 Unicode 属性 <code>Script</code>（一个书写系统），这个属性可能有一个值：<code>Cyrillic</code>、<code>Greek</code>、<code>Arabic</code>、<code>Han</code>（中文）等等，<a href="https://en.wikipedia.org/wiki/Script_(Unicode)">这里是一个完整的列表</a>。</p><p>要在给定的书写系统中查找字符，我们需要使用 <code>Script=&lt;value&gt;</code>，例如对于西里尔字母：<code>\p&#123;sc=Cyrillic&#125;</code>，中文象形文字：<code>\p&#123;sc=Han&#125;</code>，等等。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let regexp = /\p&#123;sc=Han&#125;/gu; // 返回中文象形文字</span><br><span class="line"></span><br><span class="line">let str = `Hello Привет 你好 123_456`;</span><br><span class="line"></span><br><span class="line">alert( str.match(regexp) ); // 你,好</span><br></pre></td></tr></table></figure><h3 id="举例：货币"><a href="#举例：货币" class="headerlink" title="举例：货币"></a><a href="https://zh.javascript.info/regexp-unicode#ju-li-huo-bi">举例：货币</a></h3><p>表示货币的字符，例如 <code>$</code>、<code>€</code> 和 <code>¥</code>，具有 Unicode 属性 <code>\p&#123;Currency_Symbol&#125;</code>，缩写为 <code>\p&#123;Sc&#125;</code>。</p><p>让我们用它来查找格式为“货币，接着是一个数字”的价格：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let regexp = /\p&#123;Sc&#125;\d/gu;</span><br><span class="line"></span><br><span class="line">let str = `Prices: $2, €1, ¥9`;</span><br><span class="line"></span><br><span class="line">alert( str.match(regexp) ); // $2,€1,¥9</span><br></pre></td></tr></table></figure><p>稍后，在文章 <a href="https://zh.javascript.info/regexp-quantifiers">量词 +, *, ? 和 {n}</a> 中我们将学习如何查找包含很多位的数字。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><a href="https://zh.javascript.info/regexp-unicode#zong-jie">总结</a></h2><p>修饰符 <code>u</code> 表示启用正则表达式中对 Unicode 的支持。</p><p>这意味着两件事：</p><ol><li>4 个字节长的字符被以正确的方式处理：被看成单个字符，而不是 2 个 2 字节长的字符。</li><li>Unicode 属性可以被用于查找：<code>\p&#123;…&#125;</code>。</li></ol><p>有了 unicode 属性我们可以查找给定语言中的词，特殊字符（引用，货币）等等。</p><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p>[1] <a href="https://zh.javascript.info/regexp-unicode">Unicode：修饰符 “u” 和类 \p{…} (javascript.info)</a></p>]]></content>
      
      
      <categories>
          
          <category> HTML5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Content-Type的常用取值及enctype的区别</title>
      <link href="/2020/09/24/Content-Type/"/>
      <url>/2020/09/24/Content-Type/</url>
      
        <content type="html"><![CDATA[<h2 id="Content-Type"><a href="#Content-Type" class="headerlink" title="Content-Type"></a>Content-Type</h2><ul><li>Content-Type 实体头部用于指示资源的 MIME 类型 media type <a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE">¹</a>。</li><li>媒体类型（通常称为 Multipurpose Internet Mail Extensions 或 MIME 类型）是一种标准，用来表示文档、文件或字节流的性质和格式。它在 IETF RFC 6838 中进行了定义和标准化 <a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE">²</a>。</li></ul><h3 id="常用类型"><a href="#常用类型" class="headerlink" title="常用类型"></a>常用类型</h3><ol><li>application&#x2F;octet-stream</li><li>text&#x2F;plain</li><li>text&#x2F;css</li><li>text&#x2F;html</li><li>text&#x2F;javascript</li><li>image&#x2F;*</li><li>audio&#x2F;*, video&#x2F;*</li><li>multipart&#x2F;form-data</li><li>multipart&#x2F;byteranges</li></ol><h2 id="enctype-取值-³"><a href="#enctype-取值-³" class="headerlink" title="enctype 取值 ³"></a>enctype 取值 <a href="#%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE">³</a></h2><ol><li>application&#x2F;x-www-form-urlencoded 初始的默认值,窗体数据被编码为名称&#x2F;值对。这是标准的编码格式。</li><li>multipart&#x2F;form-data 窗体数据被编码为一条消息，页上的每个控件对应消息中的一个部分。</li><li>text&#x2F;plain 窗体数据以纯文本形式进行编码，其中不含任何控件或格式字符。</li></ol><ul><li>当 action 为 get 时候，浏览器用 x-www-form-urlencoded 的编码方式把 form 数据转换成一个字串（name1&#x3D;value1&amp;name2&#x3D;value2…），然后把这个字串 append 到 url 后面，用?分割，加载这个新的 url; 当 action 为 post 时候，浏览器把 form 数据封装到 http body 中，然后发送到 server。</li><li>如果没有 type&#x3D;file 的控件，用默认的 application&#x2F;x-www-form-urlencoded 就可以了。但是如果有 type&#x3D;file 的话，就要用到 multipart&#x2F;form-data 了。浏览器会把整个表单以控件为单位分割，并为每个部分加上 Content-Disposition(form-data 或者 file),Content-Type(默认为 text&#x2F;plain),name(控件 name)等信息，并加上分割符(boundary)。</li></ul><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p>[1] <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Type#:~:text=Content%2DType%20%E5%AE%9E%E4%BD%93%E5%A4%B4%E9%83%A8%E7%94%A8%E4%BA%8E%E6%8C%87%E7%A4%BA%E8%B5%84%E6%BA%90%E7%9A%84%20MIME%20%E7%B1%BB%E5%9E%8B%20media%20type%20%E3%80%82">Content-Type|MDN</a><br>[2] <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types#:~:text=%E5%85%B6%E4%BB%96-,MIME%20%E7%B1%BB%E5%9E%8B,-%E5%AA%92%E4%BD%93%E7%B1%BB%E5%9E%8B%EF%BC%88%E9%80%9A%E5%B8%B8">MIME 类型|MDN</a><br>[3] <a href="https://juejin.cn/post/6844903826974048264">postman 中 form-data、x-www-form-urlencoded、raw、binary 的区别|掘金</a></p>]]></content>
      
      
      <categories>
          
          <category> HTML5 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
